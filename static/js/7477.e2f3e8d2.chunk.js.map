{"version":3,"file":"static/js/7477.e2f3e8d2.chunk.js","mappings":"8KACA,GAAgB,kBAAoB,6CAA6C,yBAA2B,oDAAoD,6BAA+B,wDAAwD,yCAA2C,oEAAoE,gCAAkC,2DAA2D,qCAAuC,gEAAgE,4CAA8C,uEAAuE,gDAAkD,4E,qFCU3sBA,EAAkB,CACpBC,kBAAmB,CACfC,YAAa,gCACbC,I,kiYAEJC,sBAAuB,CACnBF,YAAa,8BACbC,I,8oXAEJE,gBAAiB,CACbH,YAAa,kCACbC,I,24XAkDR,EA9C4D,SAAH,GAA8D,IAAxDG,EAAc,EAAdA,eAAgBC,EAAsB,EAAtBA,uBAA2BC,GAAK,aAC3GC,EAAAA,EAAAA,YAAU,WAC+B,IAAjCD,EAAME,wBAAiCF,EAAMG,sBAC7CC,YAAW,WACPJ,EAAMK,yBAAwB,EAClC,GAAGC,EAAAA,EAAAA,eAEX,GAAG,CAACN,EAAME,uBAAwBF,EAAMG,uBAExC,OAAgDI,EAAAA,EAAAA,UAA2B,QAAO,eAA3EC,EAAgB,KAAEC,EAAmB,KAgB5C,OACI,iBAAKC,UAAWC,EAAAA,kBAAoB,WAChC,eAAID,UAAWC,EAAAA,yBAA2B,SAAC,wBAC3C,iBAAKD,UAAWC,EAAAA,6BAA+B,WAC3C,cAAGD,UAAWC,EAAAA,kCAAoC,SAAC,eACnD,SAAC,IAAS,CAACC,IAAKZ,EAAMa,YAAaC,IAAI,4BAA4BJ,UAAWC,EAAAA,+CAElF,iBAAKD,UAAWC,EAAAA,gCAAkC,WAC9C,cAAGD,UAAWC,EAAAA,qCAAuC,SAAC,kFAGtD,gBAAKD,UAAWC,EAAAA,qCAAuC,SAClDX,EAAMe,sBAAsBC,KAAI,SAAAC,GAAW,OA3BjCC,EA2BuDD,GAzB1E,mBAAQP,UAAWC,EAAAA,4CAEfQ,YAAa,kBAAMV,EAAoBS,EAAgB,EACvDE,aAAc,kBAAMX,EAAoB,OAAO,EAC/CY,QAAS,WACLtB,EAAuB,eACvBK,YAAW,kBAAMN,EAAeoB,EAAgB,GAAEZ,EAAAA,EAAAA,kBACtD,EAAE,UAEF,SAAC,IAAS,CAACM,IAAKpB,EAAgB0B,GAAiBvB,IAAKmB,IAAKI,EAAiBR,UAAWC,EAAAA,mDARlFO,GAHS,IAACA,CA2BmE,OAElF,uBAC0B,SAArBV,EAA8BhB,EAAgBgB,GAAkBd,YAAc,uCAKnG,E,oBChDA,GAAe4B,EAAAA,EAAAA,KAfS,SAACC,GAAmB,MAAM,CAC9CV,YAAaU,EAAMC,SAASX,YAC5BE,sBAAuBQ,EAAMC,SAAST,sBACtCb,uBAAwBqB,EAAME,MAAMvB,uBACpCC,qBAAsBoB,EAAME,MAAMtB,qBACrC,GAUuC,CAAEL,eAAAA,EAAAA,GAAgBC,uBAAAA,EAAAA,GAAwBM,wBAAAA,EAAAA,IAAlF,CAA6GqB,E,kECW7G,KAAeJ,EAAAA,EAAAA,KAvBS,SAACC,EAAqBI,GAA2B,MAAM,CAC3Ef,IAAKe,EAASf,IACdE,IAAKa,EAASb,IACdJ,UAAWiB,EAASjB,UACvB,GAmBuC,CAAEkB,6BAAAA,EAAAA,IAA1C,EAX4C,SAAH,GAAmF,IAA7EhB,EAAG,EAAHA,IAAI,EAAD,EAAEE,IAAAA,OAAG,MAAG,MAAK,MAAEJ,UAAAA,OAAS,WAAGmB,EAAS,EAAED,EAA4B,EAA5BA,6BAMpF,OAJA3B,EAAAA,EAAAA,YAAU,WACN2B,EAA6B,WACjC,GAAG,KAGC,gBAAKhB,IAAKA,EAAKE,IAAKA,EAAKJ,UAAWA,EAAWoB,OAAQ,kBAAMF,EAA6B,YAAY,GAE9G,G","sources":["webpack://rpg/./src/components/main/improvementScreen/improvementScreen.module.scss?628c","components/main/improvementScreen/improvementScreen.tsx","components/main/improvementScreen/improvementScreenContainer.tsx","components/renderImg.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"improvementScreen\":\"improvementScreen_improvementScreen__QTNsV\",\"improvementScreen__title\":\"improvementScreen_improvementScreen__title__3EI4g\",\"improvementScreen__moneyInfo\":\"improvementScreen_improvementScreen__moneyInfo__818GX\",\"improvementScreen__moneyInfo_currencyImg\":\"improvementScreen_improvementScreen__moneyInfo_currencyImg__NhQHZ\",\"improvementScreen__improvements\":\"improvementScreen_improvementScreen__improvements__ieEUU\",\"improvementScreen__improvements_list\":\"improvementScreen_improvementScreen__improvements_list__tHA1d\",\"improvementScreen__improvements_list_button\":\"improvementScreen_improvementScreen__improvements_list_button__ZU3Aa\",\"improvementScreen__improvements_list_button_img\":\"improvementScreen_improvementScreen__improvements_list_button_img__BRC0j\"};","import s from './improvementScreen.module.scss'\r\nimport damageImprovementImg from '@assets/imgs/improvements/increasedDamageDealtImg.png'\r\nimport protectionImprovementImg from '@assets/imgs/improvements/reductionOfDamageReceivedImg.png'\r\nimport timeImprovementImg from '@assets/imgs/improvements/increasedProtectionTimeImg.png'\r\nimport { useEffect, useState } from 'react'\r\nimport { ImprovementScreenProps } from './improvementScreenContainer'\r\nimport { Improvement } from 'commonTypes'\r\nimport settings from 'settings'\r\nimport RenderImg from 'components/renderImg'\r\n\r\ntype FocusImprovement = 'none' | 'damageImprovement' | 'protectionImprovement' | 'timeImprovement'\r\nconst improvementInfo = {\r\n    damageImprovement: {\r\n        description: '(Increase damage dealt by 2x)',\r\n        img: damageImprovementImg,\r\n    },\r\n    protectionImprovement: {\r\n        description: '(Reduce damage taken by 2x)',\r\n        img: protectionImprovementImg,\r\n    },\r\n    timeImprovement: {\r\n        description: '(Increase defense time by 1,5x)',\r\n        img: timeImprovementImg,\r\n    },\r\n}\r\n\r\nconst ImprovementScreen: React.FC<ImprovementScreenProps> = ({ getImprovement, setSceneWithTransition, ...props }) => {\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, settings.delayForScenes)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    const [focusImprovement, setFocusImprovement] = useState<FocusImprovement>('none')\r\n    const improvementButton = (improvementName: Improvement) => {\r\n        return (\r\n            <button className={s.improvementScreen__improvements_list_button}\r\n                key={improvementName}\r\n                onMouseOver={() => setFocusImprovement(improvementName)}\r\n                onMouseLeave={() => setFocusImprovement('none')}\r\n                onClick={() => {\r\n                    setSceneWithTransition('LocationMap')\r\n                    setTimeout(() => getImprovement(improvementName), settings.opacityTransition)\r\n                }}\r\n            >\r\n                <RenderImg src={improvementInfo[improvementName].img} alt={improvementName} className={s.improvementScreen__improvements_list_button_img} />\r\n            </button>\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.improvementScreen}>\r\n            <h2 className={s.improvementScreen__title}>Enemy is overcome!</h2>\r\n            <div className={s.improvementScreen__moneyInfo}>\r\n                <p className={s.improvementScreen__moneyInfo_text}>You get 3</p>\r\n                <RenderImg src={props.currencyImg} alt='currency on this location' className={s.improvementScreen__moneyInfo_currencyImg} />\r\n            </div>\r\n            <div className={s.improvementScreen__improvements}>\r\n                <p className={s.improvementScreen__improvements_text}>\r\n                    Also, you get improvement for current location! Choose one of the available:\r\n                </p>\r\n                <div className={s.improvementScreen__improvements_list}>\r\n                    {props.availableImprovements.map(improvement => improvementButton(improvement))}\r\n                </div>\r\n                <p>{\r\n                    (focusImprovement !== 'none' ? improvementInfo[focusImprovement].description : \"(You can't not take anything)\")\r\n                }</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ImprovementScreen","import { AppStateType } from \"@redux/store\"\r\nimport { connect } from \"react-redux\"\r\nimport ImprovementScreen from \"./improvementScreen\"\r\nimport { getImprovement } from \"@redux/playerReducer\"\r\nimport { Improvement } from \"commonTypes\"\r\nimport { setSceneWithTransition, setCurrentSceneDidMount } from \"@redux/sceneReducer\"\r\nimport { SceneName } from \"scenes\"\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    currencyImg: state.location.currencyImg,\r\n    availableImprovements: state.location.availableImprovements,\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    getImprovement: (improvementName: Improvement) => void\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n}\r\n\r\nexport type ImprovementScreenProps = ReturnType<typeof mapStateToProps> & MapDispatchToProps\r\n\r\nexport default connect(mapStateToProps, { getImprovement, setSceneWithTransition, setCurrentSceneDidMount })(ImprovementScreen)","import { connect } from \"react-redux\"\r\nimport { changeUnloadedImagesQuantity } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\ntype RenderImgOwnProps = {\r\n    src: string | undefined\r\n    alt?: string\r\n    className?: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: RenderImgOwnProps) => ({\r\n    src: ownProps.src,\r\n    alt: ownProps.alt,\r\n    className: ownProps.className\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    changeUnloadedImagesQuantity: (action: \"PLUS_ONE\" | \"MINUS_ONE\") => void\r\n}\r\n\r\ntype RenderImgProps = ReturnType<typeof mapStateToProps> & MapDispatchToProps\r\n\r\nconst RenderImg: React.FC<RenderImgProps> = ({ src, alt = 'img', className = undefined, changeUnloadedImagesQuantity }) => {\r\n\r\n    useEffect(() => {\r\n        changeUnloadedImagesQuantity(\"PLUS_ONE\")\r\n    }, [])\r\n\r\n    return (\r\n        <img src={src} alt={alt} className={className} onLoad={() => changeUnloadedImagesQuantity(\"MINUS_ONE\")} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { changeUnloadedImagesQuantity })(RenderImg)"],"names":["improvementInfo","damageImprovement","description","img","protectionImprovement","timeImprovement","getImprovement","setSceneWithTransition","props","useEffect","unloadedImagesQuantity","currentSceneDidMount","setTimeout","setCurrentSceneDidMount","settings","useState","focusImprovement","setFocusImprovement","className","s","src","currencyImg","alt","availableImprovements","map","improvement","improvementName","onMouseOver","onMouseLeave","onClick","connect","state","location","scene","ImprovementScreen","ownProps","changeUnloadedImagesQuantity","undefined","onLoad"],"sourceRoot":""}