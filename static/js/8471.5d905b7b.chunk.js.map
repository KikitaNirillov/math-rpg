{"version":3,"file":"static/js/8471.5d905b7b.chunk.js","mappings":"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","sources":["common/inventoryItemsInfo.ts","webpack://rpg/./src/components/main/arena/arena.module.scss?1394","webpack://rpg/./src/components/main/arena/defaultInterface/defaultInterface.module.scss?0edc","components/main/arena/defaultInterface/defaultInterface.tsx","webpack://rpg/./src/components/main/arena/equationInterface/equationInterface.module.scss?0525","components/main/arena/equationInterface/equationInterface.tsx","webpack://rpg/./src/components/main/arena/questionInterface/questionInterface.module.scss?fcac","components/main/arena/questionInterface/questionInterface.tsx","webpack://rpg/./src/components/main/arena/inventoryInterface/inventoryInterface.module.scss?8bfa","components/main/arena/inventoryInterface/inventoryInterface.tsx","components/main/arena/arena.tsx","components/main/arena/arenaContainer.tsx","components/renderImg.tsx","components/typeWriter/typeWriter.tsx","components/typeWriter/typeWriterTransparentBtn.tsx"],"sourcesContent":["import { InventoryItemName } from \"commonTypes\";\r\nimport healingPotionImg from \"assets/imgs/potions/healingPotionImg.png\"\r\nimport freezingPotionImg from \"assets/imgs/potions/freezingPotionImg.png\"\r\nimport poisonPotionImg from \"assets/imgs/potions/poisonPotionImg.png\"\r\nimport settings from \"settings\";\r\n\r\ntype ItemInfo = {\r\n    img: string\r\n    description: string\r\n    cost: number\r\n}\r\nexport const inventoryItemsInfo: Record<InventoryItemName, ItemInfo> = {\r\n    'Healing potion': {\r\n        img: healingPotionImg,\r\n        description: `Restore ${settings.addedHealthPointsByHealthPotion} health points`,\r\n        cost: 2,\r\n    },\r\n    'Freezing potion': {\r\n        img: freezingPotionImg,\r\n        description: `Freeze the enemy for ${settings.durationOfFreezing} him moves`,\r\n        cost: 4,\r\n    },\r\n    'Poison potion': {\r\n        img: poisonPotionImg,\r\n        description: `Add ${settings.additionalDamageByPoison} damage for ${settings.durationOfPoison} your moves`,\r\n        cost: 5,\r\n    },\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"arena\":\"arena_arena__jfM5x\",\"arena__scene\":\"arena_arena__scene__OuN1A\",\"arena__scene_backgroundImg\":\"arena_arena__scene_backgroundImg__fbcl5\",\"arena__scene_enemyEffects\":\"arena_arena__scene_enemyEffects__-NyGF\",\"arena__scene_enemyEffects_effect\":\"arena_arena__scene_enemyEffects_effect__+bgTU\",\"arena__scene_enemyEffects_effect_name\":\"arena_arena__scene_enemyEffects_effect_name__7kJoh\",\"arena__scene_enemyEffects_effect_number\":\"arena_arena__scene_enemyEffects_effect_number__DDgk1\",\"arena__scene_content\":\"arena_arena__scene_content__EggAr\",\"arena__scene_content_healthBars\":\"arena_arena__scene_content_healthBars__afWvh\",\"attacker\":\"arena_attacker__Ye2dT\",\"arena__scene_content_healthBars_container\":\"arena_arena__scene_content_healthBars_container__rvzLz\",\"arena__scene_content_healthBars_container_health\":\"arena_arena__scene_content_healthBars_container_health__N+rer\",\"arena__scene_content_healthBars_container_name\":\"arena_arena__scene_content_healthBars_container_name__BxDLk\",\"arena__scene_content_figthers\":\"arena_arena__scene_content_figthers__8v8D3\",\"arena__scene_content_figthers_fighter\":\"arena_arena__scene_content_figthers_fighter__YDkQ+\",\"arena__scene_content_figthers_fighter_relativeContainer\":\"arena_arena__scene_content_figthers_fighter_relativeContainer__E7ZDM\",\"arena__scene_content_figthers_fighter_relativeContainer_img\":\"arena_arena__scene_content_figthers_fighter_relativeContainer_img__zbHe1\",\"enemyImg\":\"arena_enemyImg__aHuTW\",\"changeEnemysheight\":\"arena_changeEnemysheight__zdwuF\",\"arena__interface\":\"arena_arena__interface__eNWgA\"};","// extracted by mini-css-extract-plugin\nexport default {\"defaultInterface\":\"defaultInterface_defaultInterface__Cjuko\",\"defaultInterface__buttons\":\"defaultInterface_defaultInterface__buttons__WaSOe\",\"defaultInterface__buttons_button\":\"defaultInterface_defaultInterface__buttons_button__PoX1n\",\"readyButton\":\"defaultInterface_readyButton__88VbD\",\"defaultInterface__textField\":\"defaultInterface_defaultInterface__textField__Hm6BW\",\"defaultInterface__textField_fightInfo\":\"defaultInterface_defaultInterface__textField_fightInfo__pNuCy\"};","import { FightInterfaceName } from '@redux/fightReducer'\r\nimport s from './defaultInterface.module.scss'\r\n\r\ntype DefaultInterfaceProps = {\r\n    attack: () => void\r\n    escape: () => void\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    playerIsAttacker: boolean\r\n    fightInfo: string\r\n    enemyHealthPoints: number,\r\n    playerHealthPoints: number,\r\n}\r\n\r\nconst DefaultInterface: React.FC<DefaultInterfaceProps> = ({ attack, escape, setDisplayingFightInterface, ...props }) => {\r\n    const buttonsDisable = !props.playerIsAttacker || props.enemyHealthPoints <= 0 || props.playerHealthPoints <= 0\r\n    return (\r\n        <div className={`${s.defaultInterface} arenaInterfaceContainer`}>\r\n            <div className={s.defaultInterface__buttons}>\r\n                {(!props.playerIsAttacker && props.enemyHealthPoints > 0 && props.playerHealthPoints > 0) ?\r\n                    <button\r\n                        className={`${s.defaultInterface__buttons_button} ${s.readyButton}`}\r\n                        onClick={attack}\r\n                    >\r\n                        <p>Ready for the enemy attack</p>\r\n                    </button>\r\n                    :\r\n                    <>\r\n                        <button\r\n                            className={s.defaultInterface__buttons_button}\r\n                            onClick={attack}\r\n                            disabled={buttonsDisable}\r\n                        >\r\n                            <p>Attack</p>\r\n                        </button>\r\n                        <button\r\n                            className={s.defaultInterface__buttons_button}\r\n                            onClick={() => setDisplayingFightInterface('inventoryInterface')}\r\n                            disabled={buttonsDisable}\r\n                        >\r\n                            <p>Inventory</p>\r\n                        </button>\r\n                        <button\r\n                            className={s.defaultInterface__buttons_button}\r\n                            onClick={() => setDisplayingFightInterface('questionInterface')}\r\n                            disabled={buttonsDisable}\r\n                        >\r\n                            <p>Talk</p>\r\n                        </button>\r\n                        <button\r\n                            className={s.defaultInterface__buttons_button}\r\n                            onClick={escape}\r\n                            disabled={buttonsDisable}\r\n                        >\r\n                            <p>Escape</p>\r\n                        </button>\r\n                    </>\r\n                }\r\n            </div>\r\n            <div className={s.defaultInterface__textField}>\r\n                <div className={s.defaultInterface__textField_fightInfo}>\r\n                    <p className={s.defaultInterface__textField_fightInfo_main}>\r\n                        {props.fightInfo}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DefaultInterface","// extracted by mini-css-extract-plugin\nexport default {\"equationInterface\":\"equationInterface_equationInterface__BVhSx\",\"equationInterface__loadingSpinnerContainer\":\"equationInterface_equationInterface__loadingSpinnerContainer__Cf5PD\",\"equationInterface__loadingSpinnerContainer_img\":\"equationInterface_equationInterface__loadingSpinnerContainer_img__Si3kG\",\"equationInterface__equation\":\"equationInterface_equationInterface__equation__bxIr+\",\"equationInterface__equation_symbol\":\"equationInterface_equationInterface__equation_symbol__oDMmg\",\"equationInterface__equation_items\":\"equationInterface_equationInterface__equation_items__JlnCT\",\"equationInterface__answerForm\":\"equationInterface_equationInterface__answerForm__smeME\",\"equationInterface__answerForm_timer\":\"equationInterface_equationInterface__answerForm_timer__ST-7j\",\"equationInterface__answerForm_timer_title\":\"equationInterface_equationInterface__answerForm_timer_title__YHLI+\",\"equationInterface__answerForm_answers\":\"equationInterface_equationInterface__answerForm_answers__e2Z91\",\"equationInterface__answerForm_answers_fieldContainer\":\"equationInterface_equationInterface__answerForm_answers_fieldContainer__xMJYf\",\"equationInterface__answerForm_answers_fieldContainer_field\":\"equationInterface_equationInterface__answerForm_answers_fieldContainer_field__cefuu\",\"equationInterface__answerForm_btn\":\"equationInterface_equationInterface__answerForm_btn__ukGD1\"};","import s from './equationInterface.module.scss'\r\nimport { Formik, Form, Field, FormikProps } from 'formik';\r\nimport { EnteredEquationAnswer } from '@redux/fightReducer';\r\nimport systemSymbol from 'assets/imgs/System Symbol.png';\r\nimport loadingSpinner from '@assets/imgs/loadingSpinner.gif'\r\nimport { EquationAnswer } from 'common/equationCreator';\r\n\r\nconst CustomField: React.FC<{ formik: FormikProps<MyFormValues>, name: 'x' | 'y', autoFocus?: boolean }> = ({ formik, name, autoFocus = false }) => {\r\n    const placeholder = name.toUpperCase() + \" value(s)\"\r\n    return (\r\n        <div className={s.equationInterface__answerForm_answers_fieldContainer}>\r\n            <Field className={s.equationInterface__answerForm_answers_fieldContainer_field}\r\n                name={name} autoFocus={autoFocus} autoComplete=\"off\" placeholder={placeholder}\r\n                onChange={(e: any) => {\r\n                    const value = e.currentTarget.value;\r\n                    const regex = /^[0-9-,.]*$/;\r\n                    if (regex.test(value.toString())) {\r\n                        formik.setFieldValue(name, value);\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MyFormValues = {\r\n    x: string\r\n    y: string\r\n}\r\n\r\ntype EquationInterfaceProps = {\r\n    equation: string | null\r\n    answerEquation: (enteredAnswer: EnteredEquationAnswer) => void\r\n    timeForAnswer: number | 'NO LIMIT'\r\n}\r\n\r\nconst EquationInterface: React.FC<EquationInterfaceProps> = ({ answerEquation, ...props }) => {\r\n    const initialValues: MyFormValues = {\r\n        x: '',\r\n        y: '',\r\n    }\r\n    if (props.equation === null) return (\r\n        <div className={`${s.equationInterface} arenaInterfaceContainer`} >\r\n            <div className={s.equationInterface__loadingSpinnerContainer}>\r\n                <img src={loadingSpinner} alt=\"loading...\" className={s.equationInterface__loadingSpinnerContainer_img} />\r\n            </div>\r\n        </div>\r\n    )\r\n    else {\r\n        const equation = props.equation.split(',')\r\n        return (\r\n            <div className={`${s.equationInterface} arenaInterfaceContainer`}>\r\n                <div className={s.equationInterface__equation}>\r\n                    {(equation.length > 1) &&\r\n                        <img src={systemSymbol} alt=\"system of equations symbol\" className={s.equationInterface__equation_symbol} />\r\n                    }\r\n                    <div className={s.equationInterface__equation_parts}>\r\n                        {equation.map(el =>\r\n                            <p key={el} className={s.equationInterface__equation_parts_part}>\r\n                                {el}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    onSubmit={(values) => {\r\n                        answerEquation(values);\r\n                    }}\r\n                >\r\n                    {formik => <Form className={s.equationInterface__answerForm} >\r\n                        {props.timeForAnswer !== 'NO LIMIT' &&\r\n                            <div className={s.equationInterface__answerForm_timer}>\r\n                                <p>TIME FOR DEFENSE:&nbsp;</p>\r\n                                <div className={s.equationInterface__answerForm_timer_title}>{props.timeForAnswer} </div>\r\n                            </div>\r\n                        }\r\n                        <div className={s.equationInterface__answerForm_title}>\r\n                            YOUR ANSWER IS\r\n                        </div>\r\n                        <div className={s.equationInterface__answerForm_answers}>\r\n                            <CustomField formik={formik} name=\"x\" autoFocus={true} />\r\n                            {(equation.length > 1) &&\r\n                                <CustomField formik={formik} name=\"y\" />\r\n                            }\r\n                        </div>\r\n                        <button className={s.equationInterface__answerForm_btn} type=\"submit\">\r\n                            <p>SEND (Enter)</p>\r\n                        </button>\r\n                    </Form>}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EquationInterface","// extracted by mini-css-extract-plugin\nexport default {\"questionInterface\":\"questionInterface_questionInterface__7Gvf7\",\"questionInterface__question\":\"questionInterface_questionInterface__question__5PzhL\",\"questionInterface__answers\":\"questionInterface_questionInterface__answers__LZo0d\",\"questionInterface__answers_button\":\"questionInterface_questionInterface__answers_button__eTmNL\"};","import s from './questionInterface.module.scss'\r\nimport { EnemyQuestion } from '@redux/enemyReducer';\r\nimport settings from 'settings';\r\nimport TypeWriter from 'components/typeWriter/typeWriter';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { FightInterfaceName } from '@redux/fightReducer';\r\n\r\ntype QuestionInterfaceProps = {\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    enemyQuestions: Array<EnemyQuestion> | null\r\n    enemyBeatenEnough: boolean\r\n    answerQuestion: (enteredAnswer: string) => void\r\n}\r\n\r\nconst QuestionInterface: React.FC<QuestionInterfaceProps> = ({ setDisplayingFightInterface, answerQuestion, ...props }) => {\r\n    const randomInt = useMemo(() => Math.floor(Math.random() * 2), [props.enemyQuestions])\r\n    const [questionWasDisplayed, setQuestionWasDisplayed] = useState<boolean>(false)\r\n    const [currentQuestion, setCurrentQuestion] = useState<EnemyQuestion | null>(null)\r\n\r\n    useEffect(() => {\r\n        props.enemyQuestions && props.enemyQuestions.length > 0 && props.enemyBeatenEnough && console.log(props.enemyQuestions[0].answers.correctAnswer)\r\n        setCurrentQuestion(props.enemyQuestions ? props.enemyQuestions[0] : null)\r\n    }, [props.enemyQuestions])\r\n\r\n    useEffect(() => setQuestionWasDisplayed(false), [props.enemyQuestions])\r\n\r\n    if (props.enemyQuestions === null || !props.enemyBeatenEnough) {\r\n        return (\r\n            <div className={`${s.questionInterface} arenaInterfaceContainer`}>\r\n                <div className={s.questionInterface__question}>\r\n                    <TypeWriter\r\n                        text={props.enemyQuestions ? (\"I don't know why, but I can't do it now.\") : (\"It doesn't make sense...\")}\r\n                        whatToDoAtTheEnd={() => setTimeout(() => {\r\n                            setDisplayingFightInterface('defaultInterface')\r\n                        }, settings.requiredTalkTime)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    if (props.enemyQuestions.length === 0) {\r\n        return (\r\n            <div className={`${s.questionInterface} arenaInterfaceContainer`}>\r\n                <div className={s.questionInterface__question}>\r\n                    <TypeWriter\r\n                        text={\"Thank you...\"}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    if (!currentQuestion) {\r\n        return (\r\n            <div className={`${s.questionInterface} arenaInterfaceContainer`} />\r\n        )\r\n    }\r\n    return (\r\n        <div className={`${s.questionInterface} arenaInterfaceContainer`}>\r\n            <div className={s.questionInterface__question}>\r\n                <TypeWriter\r\n                    text={currentQuestion.question}\r\n                    whatToDoAtTheEnd={() => setQuestionWasDisplayed(true)}\r\n                />\r\n            </div>\r\n            {questionWasDisplayed && (randomInt === 1 ?\r\n                <div className={s.questionInterface__answers}>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.correctAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.correctAnswer}</p>\r\n                    </button>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.incorrectAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.incorrectAnswer}</p>\r\n                    </button>\r\n                </div>\r\n                :\r\n                <div className={s.questionInterface__answers}>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.incorrectAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.incorrectAnswer}</p>\r\n                    </button>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.correctAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.correctAnswer}</p>\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default QuestionInterface","// extracted by mini-css-extract-plugin\nexport default {\"emptyInventoryInterface\":\"inventoryInterface_emptyInventoryInterface__nuuB0\",\"emptyInventoryInterface__text\":\"inventoryInterface_emptyInventoryInterface__text__dO-su\",\"inventoryInterface\":\"inventoryInterface_inventoryInterface__pIdEd\",\"inventoryInterface__items\":\"inventoryInterface_inventoryInterface__items__WtN+m\",\"inventoryInterface__items_btn\":\"inventoryInterface_inventoryInterface__items_btn__lM4xT\",\"inventoryInterface__items_btn_img\":\"inventoryInterface_inventoryInterface__items_btn_img__WlsPe\",\"inventoryInterface__items_btn_count\":\"inventoryInterface_inventoryInterface__items_btn_count__AkSDO\",\"inventoryInterface__itemDescription\":\"inventoryInterface_inventoryInterface__itemDescription__Rw+MZ\",\"inventoryInterface__backBtn\":\"inventoryInterface_inventoryInterface__backBtn__N4+2W\"};","import { FightInterfaceName } from '@redux/fightReducer';\r\nimport { inventoryItemsInfo } from 'common/inventoryItemsInfo';\r\nimport { InventoryItem, InventoryItemName } from 'commonTypes';\r\nimport TypeWriter from 'components/typeWriter/typeWriter';\r\nimport { useEffect, useState } from 'react';\r\nimport s from './inventoryInterface.module.scss'\r\n\r\ntype InventoryInterfaceProps = {\r\n    inventory: Array<InventoryItem>\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    employInventoryItem: (itemName: InventoryItemName) => void\r\n}\r\n\r\nconst InventoryInterface: React.FC<InventoryInterfaceProps> = ({ setDisplayingFightInterface, employInventoryItem, ...props }) => {\r\n    const [focusItem, setFocusItem] = useState<null | InventoryItemName>(null)\r\n\r\n    if (props.inventory.length === 0) return (\r\n        <div className={`${s.emptyInventoryInterface} arenaInterfaceContainer`}>\r\n            <div className={s.emptyInventoryInterface__text}>\r\n                <TypeWriter text='My inventory is empty...' whatToDoAtTheEnd={() => setTimeout(() => setDisplayingFightInterface('defaultInterface'), 700)} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className={`${s.inventoryInterface} arenaInterfaceContainer`}>\r\n            <div className={s.inventoryInterface__items}>\r\n                {props.inventory.map(item =>\r\n                    <button key={item.name} className={s.inventoryInterface__items_btn}\r\n                        onMouseOver={() => setFocusItem(item.name)}\r\n                        onMouseLeave={() => setFocusItem(null)}\r\n                        onClick={() => {\r\n                            employInventoryItem(item.name)\r\n                            setDisplayingFightInterface('defaultInterface')\r\n                        }}\r\n                    >\r\n                        <img src={inventoryItemsInfo[item.name].img} alt={item.name}\r\n                            className={s.inventoryInterface__items_btn_img} />\r\n                        <p className={s.inventoryInterface__items_btn_count}>{item.count}</p>\r\n                    </button>\r\n                )}\r\n            </div>\r\n            {!focusItem ?\r\n                <button className={s.inventoryInterface__backBtn}\r\n                    onClick={() => setDisplayingFightInterface('defaultInterface')}\r\n                >\r\n                    <p>Close Inventory</p>\r\n                </button>\r\n                : (\r\n                    <p className={s.inventoryInterface__itemDescription}>\r\n                        {inventoryItemsInfo[focusItem].description === '' ? <br />\r\n                            : inventoryItemsInfo[focusItem].description}\r\n                    </p>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InventoryInterface","import React, { useEffect, useState } from \"react\"\r\nimport s from './arena.module.scss'\r\nimport { ArenaProps } from \"./arenaContainer\"\r\nimport settings from 'settings'\r\nimport DefaultInterface from \"./defaultInterface/defaultInterface\"\r\nimport EquationInterface from \"./equationInterface/equationInterface\"\r\nimport QuestionInterface from \"./questionInterface/questionInterface\"\r\nimport TypeWriterTransparentBtn from \"components/typeWriter/typeWriterTransparentBtn\"\r\nimport InventoryInterface from \"./inventoryInterface/inventoryInterface\"\r\nimport RenderImg from \"components/renderImg\"\r\nimport bossfightBackground from '@assets/imgs/bossfightBackground.gif'\r\n\r\n\r\nconst Arena: React.FC<ArenaProps> = ({ swapAttackerAndReceiving, makeAttack, answerEquation, answerQuestion, setSceneWithTransition, overcomeCurrentEnemy, setNewLocation, setDisplayingFightInterface, employInventoryItem, finishGame, ...props }) => {\r\n    const playerIsAttacker = (props.attacker === 'player' && props.playerHealthPoints > 0)\r\n    const enemyBeatenEnough = props.enemyHealthPoints <= settings.requiredEnemyHealthPointsForConversation\r\n    const escape = () => setSceneWithTransition(\"LocationMap\")\r\n    const [enemysOpacity, setEnemysOpacity] = useState<number>(1)\r\n\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, settings.delayForScenes)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    // logic of the timer end: \r\n    useEffect(() => {\r\n        if (props.timeForAnswer === 0) {\r\n            answerEquation('noAnswer')\r\n        }\r\n    }, [props.timeForAnswer])\r\n\r\n    // logic of the end of the battle:\r\n    useEffect(() => { //if player died\r\n        if (props.playerHealthPoints !== null && props.playerHealthPoints <= 0) {\r\n            setTimeout(() => {\r\n                setSceneWithTransition('GameOver')\r\n            }, settings.changingHealthPointsTransition)\r\n        }\r\n    }, [props.playerHealthPoints])\r\n\r\n    useEffect(() => { //if victoryMethod === 'kill'\r\n        if (props.enemyHealthPoints !== null && props.enemyHealthPoints <= 0) {\r\n            overcomeCurrentEnemy(\"kill\")\r\n            setTimeout(() => {\r\n                setEnemysOpacity(0)\r\n            }, settings.changingHealthPointsTransition)\r\n            setTimeout(() => {\r\n                if (props.enemyType === \"mainBoss\" && props.undiscoveredLocations.length === 0) {\r\n                    finishGame()\r\n                }\r\n                else if (props.enemyType === \"mainBoss\") {\r\n                    setSceneWithTransition('LocationMap')\r\n                }\r\n                else setSceneWithTransition('ImprovementScreen')\r\n            }, settings.changingHealthPointsTransition + settings.timeForEnemysDie)\r\n            setTimeout(() => {\r\n                if (props.enemyType === \"mainBoss\" && props.undiscoveredLocations.length > 0) {\r\n                    setNewLocation()\r\n                }\r\n            }, settings.changingHealthPointsTransition + settings.timeForEnemysDie + settings.opacityTransition)\r\n        }\r\n    }, [props.enemyHealthPoints])\r\n    useEffect(() => { //if victoryMethod === 'talk'\r\n        if (props.enemyQuestions !== null && props.enemyQuestions.length === 0) { // if enemyType==='mainBoss' this expression return false\r\n            overcomeCurrentEnemy(\"talk\")\r\n            setTimeout(() => {\r\n                setEnemysOpacity(0)\r\n            }, settings.changingHealthPointsTransition) // i can use any amount of time there\r\n            setTimeout(() => {\r\n                setSceneWithTransition('ImprovementScreen')\r\n            }, settings.changingHealthPointsTransition + settings.timeForEnemysDie)\r\n            setTimeout(() => {\r\n                setDisplayingFightInterface(\"defaultInterface\")\r\n            }, settings.changingHealthPointsTransition + settings.timeForEnemysDie + settings.opacityTransition)\r\n        }\r\n    }, [props.enemyQuestions])\r\n\r\n    return (\r\n        <div className={s.arena} >\r\n            <div className={s.arena__scene}>\r\n                <RenderImg src={props.enemyType === \"mainBoss\" ? bossfightBackground : props.fightBackgroundImg} alt=\"background\" className={s.arena__scene_backgroundImg} />\r\n                {props.enemyEffects.length > 0 &&\r\n                    <div className={s.arena__scene_enemyEffects}>\r\n                        {props.enemyEffects.map(ef =>\r\n                            <div className={s.arena__scene_enemyEffects_effect} key={ef.name}>\r\n                                <p className={s.arena__scene_enemyEffects_effect_name}>\r\n                                    {ef.name}:\r\n                                </p>\r\n                                <p className={s.arena__scene_enemyEffects_effect_number}\r\n                                    style={{ width: `calc(var(--vh, 1vh) * ${ef.duration.toString().length * 2.15}` }}\r\n                                >\r\n                                    {ef.duration}\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                }\r\n                <div className={s.arena__scene_content}>\r\n                    <div className={s.arena__scene_content_healthBars}>\r\n                        <div className={`${s.arena__scene_content_healthBars_container} ${playerIsAttacker ? s.attacker : ``}`}>\r\n                            <div className={s.arena__scene_content_healthBars_container_health} style={{ width: `${props.playerHealthPoints}%`, transition: `all ${settings.changingHealthPointsTransition}ms` }} />\r\n                            <p className={s.arena__scene_content_healthBars_container_name}>{props.playerHealthPoints}</p>\r\n                        </div>\r\n                        <div className={`${s.arena__scene_content_healthBars_container}`}>\r\n                            <div className={s.arena__scene_content_healthBars_container_health} style={{ width: `0%` }} />\r\n                            <p className={s.arena__scene_content_healthBars_container_name}>\r\n                                {props.enemyHealthPoints === 0 ? 'PLAYER' :\r\n                                    props.playerHealthPoints === 0 ? 'ENEMY' :\r\n                                        props.attacker.toUpperCase()}'S TURN\r\n                            </p>\r\n                        </div>\r\n                        <div className={`${s.arena__scene_content_healthBars_container} ${!playerIsAttacker ? s.attacker : ``}`}>\r\n                            <div className={s.arena__scene_content_healthBars_container_health} style={{ width: `${(props.enemyType === 'mainBoss' ? props.enemyHealthPoints / 2 : props.enemyHealthPoints)}%`, transition: `all ${settings.changingHealthPointsTransition}ms` }} />\r\n                            <p className={s.arena__scene_content_healthBars_container_name}>{props.enemyHealthPoints}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.arena__scene_content_figthers}>\r\n                        <div className={s.arena__scene_content_figthers_fighter} style={{ left: `${props.playerPositionOnScreen}%`, height: '110%' }}>\r\n                            <div className={s.arena__scene_content_figthers_fighter_relativeContainer}>\r\n                                <img src={props.playerDefaultImg} alt=\"Player\" className={s.arena__scene_content_figthers_fighter_relativeContainer_img} />\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.arena__scene_content_figthers_fighter} style={{ right: `${props.enemyPositionOnScreen}%`, opacity: `${enemysOpacity}`, transition: `opacity ${settings.timeForEnemysDie}ms` }}>\r\n                            <div className={s.arena__scene_content_figthers_fighter_relativeContainer}>\r\n                                <img src={props.enemyDefaultImg} alt=\"Enemy\" className={s.arena__scene_content_figthers_fighter_relativeContainer_img} id={s.enemyImg} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.arena__interface}>\r\n                {\r\n                    props.displayingFightInterface === 'questionInterface' ?\r\n                        <QuestionInterface answerQuestion={answerQuestion} enemyQuestions={props.enemyQuestions} setDisplayingFightInterface={setDisplayingFightInterface} enemyBeatenEnough={enemyBeatenEnough} />\r\n                        : (\r\n                            props.displayingFightInterface === \"equationInterface\" ?\r\n                                <EquationInterface answerEquation={answerEquation} timeForAnswer={props.timeForAnswer} equation={props.equation} />\r\n                                : (\r\n                                    props.displayingFightInterface === \"inventoryInterface\" ?\r\n                                        <InventoryInterface setDisplayingFightInterface={setDisplayingFightInterface} inventory={props.inventory} employInventoryItem={employInventoryItem} />\r\n                                        : <DefaultInterface attack={makeAttack} playerIsAttacker={playerIsAttacker} playerHealthPoints={props.playerHealthPoints} enemyHealthPoints={props.enemyHealthPoints} escape={escape} setDisplayingFightInterface={setDisplayingFightInterface} fightInfo={props.fightInfo} />\r\n                                )\r\n                        )\r\n                }\r\n                <TypeWriterTransparentBtn /> {/*diplay: 'none' if TypeWriter doesn't write*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Arena","import { AppStateType } from \"redux/store\"\r\nimport { connect } from \"react-redux\"\r\nimport Arena from \"./arena\"\r\nimport { swapAttackerAndReceiving, makeAttack, answerEquation, answerQuestion, EnteredEquationAnswer, overcomeCurrentEnemy, setDisplayingFightInterface, FightInterfaceName } from \"@redux/fightReducer\"\r\nimport { employInventoryItem } from \"@redux/playerReducer\"\r\nimport { setSceneWithTransition, setCurrentSceneDidMount } from \"@redux/sceneReducer\"\r\nimport { SceneName } from \"scenes\"\r\nimport { setNewLocation } from \"@redux/locationReducer\"\r\nimport { InventoryItemName } from \"commonTypes\"\r\nimport { finishGame } from \"@redux/gameReducer\"\r\n\r\nexport type ArenaProps = StatePropsType & DispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    playerName: state.player.name,\r\n    playerDefaultImg: state.player.defaultImg,\r\n    playerHealthPoints: state.player.healthPoints,\r\n    enemyName: state.enemy.name,\r\n    enemyType: state.enemy.enemyType,\r\n    enemyDefaultImg: state.enemy.defaultImg,\r\n    enemyHealthPoints: state.enemy.healthPoints,\r\n    enemyQuestions: state.enemy.questions,\r\n    enemyEffects: state.enemy.currentEffects,\r\n    attacker: state.fight.attacker,\r\n    inventory: state.player.inventory,\r\n\r\n    fightBackgroundImg: state.location.fightBackgroundImg,\r\n\r\n    fightInfo: state.fight.fightInfo,\r\n\r\n    equation: state.fight.equation,\r\n    timeForAnswer: state.fight.timeForAnswer,\r\n\r\n    playerPositionOnScreen: state.player.positionOnArenaScreen,\r\n    enemyPositionOnScreen: state.enemy.positionOnArenaScreen,\r\n\r\n    displayingFightInterface: state.fight.displayingFightInterface,\r\n\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n\r\n    undiscoveredLocations: state.game.undiscoveredLocations\r\n})\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n    swapAttackerAndReceiving: () => void\r\n    makeAttack: () => void\r\n    answerEquation: (enteredAnswer: EnteredEquationAnswer) => void\r\n    answerQuestion: (enteredAnswer: string) => void\r\n    overcomeCurrentEnemy: (method: 'talk' | 'kill') => void\r\n    setNewLocation: () => void\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    employInventoryItem: (itemName: InventoryItemName) => void\r\n    finishGame: () => void\r\n}\r\n\r\nexport default connect(mapStateToProps, { swapAttackerAndReceiving, employInventoryItem, makeAttack, answerEquation, answerQuestion, setSceneWithTransition, overcomeCurrentEnemy, setNewLocation, setDisplayingFightInterface, setCurrentSceneDidMount, finishGame })(Arena)","import { connect } from \"react-redux\"\r\nimport { changeUnloadedImagesQuantity } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\ntype RenderImgOwnProps = {\r\n    src: string | undefined\r\n    alt?: string\r\n    className?: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: RenderImgOwnProps) => ({\r\n    src: ownProps.src,\r\n    alt: ownProps.alt,\r\n    className: ownProps.className\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    changeUnloadedImagesQuantity: (action: \"PLUS_ONE\" | \"MINUS_ONE\") => void\r\n}\r\n\r\ntype RenderImgProps = ReturnType<typeof mapStateToProps> & MapDispatchToProps\r\n\r\nconst RenderImg: React.FC<RenderImgProps> = ({ src, alt = 'img', className = undefined, changeUnloadedImagesQuantity }) => {\r\n\r\n    useEffect(() => {\r\n        changeUnloadedImagesQuantity(\"PLUS_ONE\")\r\n    }, [])\r\n\r\n    return (\r\n        <img src={src} alt={alt} className={className} onLoad={() => changeUnloadedImagesQuantity(\"MINUS_ONE\")} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { changeUnloadedImagesQuantity })(RenderImg)","import { useEffect, useState } from \"react\"\r\nimport typewriterSound from '@assets/sounds/typewriterSound.mp3'\r\nimport useSound from \"use-sound\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { setTypeWriterIsWriting, setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { connect } from \"react-redux\"\r\n\r\nconst delayBeforeFirstSymbol = 300\r\nconst defaultDelayBeforeNextSymbol = 80\r\n\r\ntype TypeWriterOwnProps = {\r\n    text: string\r\n    whatToDoAtTheEnd?: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: TypeWriterOwnProps) => ({\r\n    ...ownProps,\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n    typeWriterStopped: state.game.typeWriterStopped,\r\n    opacity: state.scene.opacity,\r\n    soundValue: state.game.soundValue\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterIsWriting: (isWriting: boolean) => void\r\n    setTypeWriterStopped: (wasStop: boolean) => void\r\n}\r\n\r\ntype TypeWriterProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriter: React.FC<TypeWriterProps> = ({ text, typeWriterStopped, opacity, soundValue, setTypeWriterStopped, setTypeWriterIsWriting, whatToDoAtTheEnd = () => { } }) => {\r\n    const [play, { stop }] = useSound(typewriterSound, { volume: soundValue === \"OFF\" ? 0 : 0.5 });\r\n    const [newText, setNewText] = useState<string>('')\r\n    const [letterNumber, setLetterNumber] = useState<number>(0)\r\n    const [firstSimbolDisplayed, setFirstSimbolDisplayed] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setTypeWriterStopped(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTypeWriterStopped(false)\r\n        setLetterNumber(0)\r\n        setNewText('')\r\n        setFirstSimbolDisplayed(false)\r\n        setTypeWriterIsWriting(true)\r\n    }, [text])\r\n\r\n    useEffect(() => {\r\n        if (typeWriterStopped) {\r\n            setTypeWriterIsWriting(false)\r\n            whatToDoAtTheEnd()\r\n        }\r\n    }, [typeWriterStopped])\r\n\r\n    useEffect(() => {\r\n        if (!typeWriterStopped && opacity === 1) {\r\n            setTimeout(() => {\r\n                if (newText.length !== text.length) {\r\n                    setTimeout(() => {\r\n                        stop()\r\n                        if (!typeWriterStopped) play()\r\n                        setNewText(newText + text.charAt(letterNumber))\r\n                        setFirstSimbolDisplayed(true)\r\n                        setLetterNumber(letterNumber + 1)\r\n                    }, defaultDelayBeforeNextSymbol)\r\n                } else {\r\n                    setTypeWriterStopped(true)\r\n                }\r\n            }, firstSimbolDisplayed ? 0 : (delayBeforeFirstSymbol))\r\n        }\r\n    }, [newText, opacity])\r\n\r\n    return <p>\r\n        {typeWriterStopped ? text : newText}\r\n    </p>\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterIsWriting, setTypeWriterStopped })(TypeWriter)","import { setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { AppStateType } from '@redux/store'\r\nimport { connect } from 'react-redux'\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterStopped: (isStop: boolean) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n})\r\n\r\ntype TypeWriterTransparentBtnProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriterTransparentBtn: React.FC<TypeWriterTransparentBtnProps> = ({ setTypeWriterStopped, typeWriterIsWriting }) => {\r\n    return (\r\n        <button className='transparentAbsoluteBtn'\r\n            style={{ display: `${typeWriterIsWriting ? 'initial' : 'none'}` }}\r\n            onClick={() => setTypeWriterStopped(true)} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterStopped })(TypeWriterTransparentBtn)"],"names":["inventoryItemsInfo","img","healingPotionImg","description","concat","settings","cost","freezingPotionImg","poisonPotionImg","_ref","attack","escape","setDisplayingFightInterface","props","_objectWithoutProperties","_excluded","buttonsDisable","playerIsAttacker","enemyHealthPoints","playerHealthPoints","_jsxs","className","s","children","_jsx","onClick","_Fragment","disabled","fightInfo","CustomField","formik","name","_ref$autoFocus","autoFocus","placeholder","toUpperCase","Field","autoComplete","onChange","e","value","currentTarget","test","toString","setFieldValue","_ref2","answerEquation","equation","src","alt","split","length","map","el","Formik","initialValues","x","y","onSubmit","values","Form","timeForAnswer","type","answerQuestion","randomInt","useMemo","Math","floor","random","enemyQuestions","_useState","useState","_useState2","_slicedToArray","questionWasDisplayed","setQuestionWasDisplayed","_useState3","_useState4","currentQuestion","setCurrentQuestion","useEffect","enemyBeatenEnough","console","log","answers","correctAnswer","TypeWriter","text","question","whatToDoAtTheEnd","incorrectAnswer","setTimeout","employInventoryItem","focusItem","setFocusItem","inventory","item","onMouseOver","onMouseLeave","count","swapAttackerAndReceiving","makeAttack","setSceneWithTransition","overcomeCurrentEnemy","setNewLocation","finishGame","attacker","enemysOpacity","setEnemysOpacity","unloadedImagesQuantity","currentSceneDidMount","setCurrentSceneDidMount","enemyType","undiscoveredLocations","RenderImg","bossfightBackground","fightBackgroundImg","enemyEffects","ef","style","width","duration","transition","left","playerPositionOnScreen","height","playerDefaultImg","right","enemyPositionOnScreen","opacity","enemyDefaultImg","id","displayingFightInterface","QuestionInterface","EquationInterface","InventoryInterface","DefaultInterface","TypeWriterTransparentBtn","connect","state","playerName","player","defaultImg","healthPoints","enemyName","enemy","questions","currentEffects","fight","location","positionOnArenaScreen","scene","game","Arena","ownProps","changeUnloadedImagesQuantity","_ref$alt","_ref$className","undefined","onLoad","_objectSpread","typeWriterIsWriting","typeWriterStopped","soundValue","setTypeWriterIsWriting","setTypeWriterStopped","_ref$whatToDoAtTheEnd","_useSound","useSound","typewriterSound","volume","_useSound2","play","stop","newText","setNewText","letterNumber","setLetterNumber","_useState5","_useState6","firstSimbolDisplayed","setFirstSimbolDisplayed","charAt","display"],"sourceRoot":""}