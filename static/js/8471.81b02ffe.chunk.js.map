{"version":3,"file":"static/js/8471.81b02ffe.chunk.js","mappings":"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","sources":["common/inventoryItemsInfo.ts","webpack://rpg/./src/components/main/arena/arena.module.scss?1394","webpack://rpg/./src/components/main/arena/defaultInterface/defaultInterface.module.scss?0edc","components/main/arena/defaultInterface/defaultInterface.tsx","webpack://rpg/./src/components/main/arena/equationInterface/equationInterface.module.scss?0525","components/main/arena/equationInterface/equationInterface.tsx","webpack://rpg/./src/components/main/arena/questionInterface/questionInterface.module.scss?fcac","components/main/arena/questionInterface/questionInterface.tsx","webpack://rpg/./src/components/main/arena/inventoryInterface/inventoryInterface.module.scss?8bfa","components/main/arena/inventoryInterface/inventoryInterface.tsx","components/main/arena/arena.tsx","components/main/arena/arenaContainer.tsx","components/renderImg.tsx","components/typeWriter/typeWriter.tsx","components/typeWriter/typeWriterTransparentBtn.tsx"],"sourcesContent":["import { InventoryItemName } from \"commonTypes\";\r\nimport healingPotionImg from \"assets/imgs/potions/healingPotionImg.png\"\r\nimport freezingPotionImg from \"assets/imgs/potions/freezingPotionImg.png\"\r\nimport poisonPotionImg from \"assets/imgs/potions/poisonPotionImg.png\"\r\nimport settings from \"settings\";\r\n\r\ntype ItemInfo = {\r\n    img: string\r\n    description: string\r\n    cost: number\r\n}\r\nexport const inventoryItemsInfo: Record<InventoryItemName, ItemInfo> = {\r\n    'Healing potion': {\r\n        img: healingPotionImg,\r\n        description: `Restore ${settings.addedHealthPointsByHealthPotion} health points`,\r\n        cost: 2,\r\n    },\r\n    'Freezing potion': {\r\n        img: freezingPotionImg,\r\n        description: `Freeze the enemy for ${settings.durationOfFreezing} him moves`,\r\n        cost: 4,\r\n    },\r\n    'Poison potion': {\r\n        img: poisonPotionImg,\r\n        description: `Add ${settings.additionalDamageByPoison} damage for ${settings.durationOfPoison} your moves`,\r\n        cost: 5,\r\n    },\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"arena\":\"arena_arena__jfM5x\",\"arena__scene\":\"arena_arena__scene__OuN1A\",\"arena__scene_backgroundImg\":\"arena_arena__scene_backgroundImg__fbcl5\",\"arena__scene_enemyEffects\":\"arena_arena__scene_enemyEffects__-NyGF\",\"arena__scene_enemyEffects_effect\":\"arena_arena__scene_enemyEffects_effect__+bgTU\",\"arena__scene_enemyEffects_effect_name\":\"arena_arena__scene_enemyEffects_effect_name__7kJoh\",\"arena__scene_enemyEffects_effect_number\":\"arena_arena__scene_enemyEffects_effect_number__DDgk1\",\"arena__scene_content\":\"arena_arena__scene_content__EggAr\",\"arena__scene_content_healthBars\":\"arena_arena__scene_content_healthBars__afWvh\",\"attacker\":\"arena_attacker__Ye2dT\",\"arena__scene_content_healthBars_container\":\"arena_arena__scene_content_healthBars_container__rvzLz\",\"arena__scene_content_healthBars_container_health\":\"arena_arena__scene_content_healthBars_container_health__N+rer\",\"arena__scene_content_healthBars_container_name\":\"arena_arena__scene_content_healthBars_container_name__BxDLk\",\"arena__scene_content_figthers\":\"arena_arena__scene_content_figthers__8v8D3\",\"arena__scene_content_figthers_fighter\":\"arena_arena__scene_content_figthers_fighter__YDkQ+\",\"arena__scene_content_figthers_fighter_relativeContainer\":\"arena_arena__scene_content_figthers_fighter_relativeContainer__E7ZDM\",\"arena__scene_content_figthers_fighter_relativeContainer_img\":\"arena_arena__scene_content_figthers_fighter_relativeContainer_img__zbHe1\",\"enemyImg\":\"arena_enemyImg__aHuTW\",\"changeEnemysheight\":\"arena_changeEnemysheight__zdwuF\",\"arena__interface\":\"arena_arena__interface__eNWgA\"};","// extracted by mini-css-extract-plugin\nexport default {\"defaultInterface\":\"defaultInterface_defaultInterface__Cjuko\",\"defaultInterface__buttons\":\"defaultInterface_defaultInterface__buttons__WaSOe\",\"defaultInterface__buttons_button\":\"defaultInterface_defaultInterface__buttons_button__PoX1n\",\"readyButton\":\"defaultInterface_readyButton__88VbD\",\"defaultInterface__textField\":\"defaultInterface_defaultInterface__textField__Hm6BW\",\"defaultInterface__textField_fightInfo\":\"defaultInterface_defaultInterface__textField_fightInfo__pNuCy\"};","import { FightInterfaceName } from '@redux/fightReducer'\r\nimport s from './defaultInterface.module.scss'\r\n\r\ntype DefaultInterfaceProps = {\r\n    attack: () => void\r\n    escape: () => void\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    playerIsAttacker: boolean\r\n    fightInfo: string\r\n    enemyHealthPoints: number,\r\n    playerHealthPoints: number,\r\n}\r\n\r\nconst DefaultInterface: React.FC<DefaultInterfaceProps> = ({ attack, escape, setDisplayingFightInterface, ...props }) => {\r\n    const buttonsDisable = !props.playerIsAttacker || props.enemyHealthPoints <= 0 || props.playerHealthPoints <= 0\r\n    return (\r\n        <div className={`${s.defaultInterface} arenaInterfaceContainer`}>\r\n            <div className={s.defaultInterface__buttons}>\r\n                {(!props.playerIsAttacker && props.enemyHealthPoints > 0 && props.playerHealthPoints > 0) ?\r\n                    <button\r\n                        className={`${s.defaultInterface__buttons_button} ${s.readyButton}`}\r\n                        onClick={attack}\r\n                    >\r\n                        <p>Ready for the enemy attack</p>\r\n                    </button>\r\n                    :\r\n                    <>\r\n                        <button\r\n                            className={s.defaultInterface__buttons_button}\r\n                            onClick={attack}\r\n                            disabled={buttonsDisable}\r\n                        >\r\n                            <p>Attack</p>\r\n                        </button>\r\n                        <button\r\n                            className={s.defaultInterface__buttons_button}\r\n                            onClick={() => setDisplayingFightInterface('inventoryInterface')}\r\n                            disabled={buttonsDisable}\r\n                        >\r\n                            <p>Inventory</p>\r\n                        </button>\r\n                        <button\r\n                            className={s.defaultInterface__buttons_button}\r\n                            onClick={() => setDisplayingFightInterface('questionInterface')}\r\n                            disabled={buttonsDisable}\r\n                        >\r\n                            <p>Talk</p>\r\n                        </button>\r\n                        <button\r\n                            className={s.defaultInterface__buttons_button}\r\n                            onClick={escape}\r\n                            disabled={buttonsDisable}\r\n                        >\r\n                            <p>Escape</p>\r\n                        </button>\r\n                    </>\r\n                }\r\n            </div>\r\n            <div className={s.defaultInterface__textField}>\r\n                <div className={s.defaultInterface__textField_fightInfo}>\r\n                    <p className={s.defaultInterface__textField_fightInfo_main}>\r\n                        {props.fightInfo}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DefaultInterface","// extracted by mini-css-extract-plugin\nexport default {\"equationInterface\":\"equationInterface_equationInterface__BVhSx\",\"equationInterface__loadingSpinnerContainer\":\"equationInterface_equationInterface__loadingSpinnerContainer__Cf5PD\",\"equationInterface__loadingSpinnerContainer_img\":\"equationInterface_equationInterface__loadingSpinnerContainer_img__Si3kG\",\"equationInterface__equation\":\"equationInterface_equationInterface__equation__bxIr+\",\"equationInterface__equation_symbol\":\"equationInterface_equationInterface__equation_symbol__oDMmg\",\"equationInterface__equation_items\":\"equationInterface_equationInterface__equation_items__JlnCT\",\"equationInterface__answerForm\":\"equationInterface_equationInterface__answerForm__smeME\",\"equationInterface__answerForm_timer\":\"equationInterface_equationInterface__answerForm_timer__ST-7j\",\"equationInterface__answerForm_timer_title\":\"equationInterface_equationInterface__answerForm_timer_title__YHLI+\",\"equationInterface__answerForm_answers\":\"equationInterface_equationInterface__answerForm_answers__e2Z91\",\"equationInterface__answerForm_answers_fieldContainer\":\"equationInterface_equationInterface__answerForm_answers_fieldContainer__xMJYf\",\"equationInterface__answerForm_answers_fieldContainer_field\":\"equationInterface_equationInterface__answerForm_answers_fieldContainer_field__cefuu\",\"equationInterface__answerForm_btn\":\"equationInterface_equationInterface__answerForm_btn__ukGD1\"};","import s from './equationInterface.module.scss'\r\nimport { Formik, Form, Field, FormikProps } from 'formik';\r\nimport { EnteredEquationAnswer } from '@redux/fightReducer';\r\nimport systemSymbol from 'assets/imgs/System Symbol.png';\r\nimport loadingSpinner from '@assets/imgs/loadingSpinner.gif'\r\nimport { EquationAnswer } from 'common/equationCreator';\r\n\r\nconst CustomField: React.FC<{ formik: FormikProps<MyFormValues>, name: 'x' | 'y', autoFocus?: boolean }> = ({ formik, name, autoFocus = false }) => {\r\n    const placeholder = name.toUpperCase() + \" value(s)\"\r\n    return (\r\n        <div className={s.equationInterface__answerForm_answers_fieldContainer}>\r\n            <Field className={s.equationInterface__answerForm_answers_fieldContainer_field}\r\n                name={name} autoFocus={autoFocus} autoComplete=\"off\" placeholder={placeholder}\r\n                onChange={(e: any) => {\r\n                    const value = e.currentTarget.value;\r\n                    const regex = /^[0-9-,.]*$/;\r\n                    if (regex.test(value.toString())) {\r\n                        formik.setFieldValue(name, value);\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MyFormValues = {\r\n    x: string\r\n    y: string\r\n}\r\n\r\ntype EquationInterfaceProps = {\r\n    equation: string | null\r\n    answerEquation: (enteredAnswer: EnteredEquationAnswer) => void\r\n    timeForAnswer: number | 'NO LIMIT'\r\n}\r\n\r\nconst EquationInterface: React.FC<EquationInterfaceProps> = ({ answerEquation, ...props }) => {\r\n    const initialValues: MyFormValues = {\r\n        x: '',\r\n        y: '',\r\n    }\r\n    if (props.equation === null) return (\r\n        <div className={`${s.equationInterface} arenaInterfaceContainer`} >\r\n            <div className={s.equationInterface__loadingSpinnerContainer}>\r\n                <img src={loadingSpinner} alt=\"loading...\" className={s.equationInterface__loadingSpinnerContainer_img} />\r\n            </div>\r\n        </div>\r\n    )\r\n    else {\r\n        const equation = props.equation.split(',')\r\n        return (\r\n            <div className={`${s.equationInterface} arenaInterfaceContainer`}>\r\n                <div className={s.equationInterface__equation}>\r\n                    {(equation.length > 1) &&\r\n                        <img src={systemSymbol} alt=\"system of equations symbol\" className={s.equationInterface__equation_symbol} />\r\n                    }\r\n                    <div className={s.equationInterface__equation_parts}>\r\n                        {equation.map(el =>\r\n                            <p key={el} className={s.equationInterface__equation_parts_part}>\r\n                                {el}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    onSubmit={(values) => {\r\n                        answerEquation(values);\r\n                    }}\r\n                >\r\n                    {formik => <Form className={s.equationInterface__answerForm} >\r\n                        {props.timeForAnswer !== 'NO LIMIT' &&\r\n                            <div className={s.equationInterface__answerForm_timer}>\r\n                                <p>TIME FOR DEFENSE:&nbsp;</p>\r\n                                <div className={s.equationInterface__answerForm_timer_title}>{props.timeForAnswer} </div>\r\n                            </div>\r\n                        }\r\n                        <div className={s.equationInterface__answerForm_title}>\r\n                            YOUR ANSWER IS\r\n                        </div>\r\n                        <div className={s.equationInterface__answerForm_answers}>\r\n                            <CustomField formik={formik} name=\"x\" autoFocus={true} />\r\n                            {(equation.length > 1) &&\r\n                                <CustomField formik={formik} name=\"y\" />\r\n                            }\r\n                        </div>\r\n                        <button className={s.equationInterface__answerForm_btn} type=\"submit\">\r\n                            <p>SEND (Enter)</p>\r\n                        </button>\r\n                    </Form>}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EquationInterface","// extracted by mini-css-extract-plugin\nexport default {\"questionInterface\":\"questionInterface_questionInterface__7Gvf7\",\"questionInterface__question\":\"questionInterface_questionInterface__question__5PzhL\",\"questionInterface__answers\":\"questionInterface_questionInterface__answers__LZo0d\",\"questionInterface__answers_button\":\"questionInterface_questionInterface__answers_button__eTmNL\"};","import s from './questionInterface.module.scss'\r\nimport { EnemyQuestion } from '@redux/enemyReducer';\r\nimport settings from 'settings';\r\nimport TypeWriter from 'components/typeWriter/typeWriter';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { FightInterfaceName } from '@redux/fightReducer';\r\n\r\ntype QuestionInterfaceProps = {\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    enemyQuestions: Array<EnemyQuestion> | null\r\n    enemyBeatenEnough: boolean\r\n    answerQuestion: (enteredAnswer: string) => void\r\n}\r\n\r\nconst QuestionInterface: React.FC<QuestionInterfaceProps> = ({ setDisplayingFightInterface, answerQuestion, ...props }) => {\r\n    const randomInt = useMemo(() => Math.floor(Math.random() * 2), [props.enemyQuestions])\r\n    const [questionWasDisplayed, setQuestionWasDisplayed] = useState<boolean>(false)\r\n    const [currentQuestion, setCurrentQuestion] = useState<EnemyQuestion | null>(null)\r\n\r\n    useEffect(() => {\r\n        setCurrentQuestion(props.enemyQuestions ? props.enemyQuestions[0] : null)\r\n    }, [props.enemyQuestions])\r\n\r\n    useEffect(() => setQuestionWasDisplayed(false), [props.enemyQuestions])\r\n\r\n    if (props.enemyQuestions === null || !props.enemyBeatenEnough) {\r\n        return (\r\n            <div className={`${s.questionInterface} arenaInterfaceContainer`}>\r\n                <div className={s.questionInterface__question}>\r\n                    <TypeWriter\r\n                        text={props.enemyQuestions ? (\"I don't know why, but I can't do it now.\") : (\"It doesn't make sense...\")}\r\n                        whatToDoAtTheEnd={() => setTimeout(() => {\r\n                            setDisplayingFightInterface('defaultInterface')\r\n                        }, settings.requiredTalkTime)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    if (props.enemyQuestions.length === 0) {\r\n        return (\r\n            <div className={`${s.questionInterface} arenaInterfaceContainer`}>\r\n                <div className={s.questionInterface__question}>\r\n                    <TypeWriter\r\n                        text={\"Thank you...\"}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    if (!currentQuestion) {\r\n        return (\r\n            <div className={`${s.questionInterface} arenaInterfaceContainer`} />\r\n        )\r\n    }\r\n    return (\r\n        <div className={`${s.questionInterface} arenaInterfaceContainer`}>\r\n            <div className={s.questionInterface__question}>\r\n                <TypeWriter\r\n                    text={currentQuestion.question}\r\n                    whatToDoAtTheEnd={() => setQuestionWasDisplayed(true)}\r\n                />\r\n            </div>\r\n            {questionWasDisplayed && (randomInt === 1 ?\r\n                <div className={s.questionInterface__answers}>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.correctAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.correctAnswer}</p>\r\n                    </button>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.incorrectAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.incorrectAnswer}</p>\r\n                    </button>\r\n                </div>\r\n                :\r\n                <div className={s.questionInterface__answers}>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.incorrectAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.incorrectAnswer}</p>\r\n                    </button>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.correctAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.correctAnswer}</p>\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default QuestionInterface","// extracted by mini-css-extract-plugin\nexport default {\"emptyInventoryInterface\":\"inventoryInterface_emptyInventoryInterface__nuuB0\",\"emptyInventoryInterface__text\":\"inventoryInterface_emptyInventoryInterface__text__dO-su\",\"inventoryInterface\":\"inventoryInterface_inventoryInterface__pIdEd\",\"inventoryInterface__items\":\"inventoryInterface_inventoryInterface__items__WtN+m\",\"inventoryInterface__items_btn\":\"inventoryInterface_inventoryInterface__items_btn__lM4xT\",\"inventoryInterface__items_btn_img\":\"inventoryInterface_inventoryInterface__items_btn_img__WlsPe\",\"inventoryInterface__items_btn_count\":\"inventoryInterface_inventoryInterface__items_btn_count__AkSDO\",\"inventoryInterface__itemDescription\":\"inventoryInterface_inventoryInterface__itemDescription__Rw+MZ\",\"inventoryInterface__backBtn\":\"inventoryInterface_inventoryInterface__backBtn__N4+2W\"};","import { FightInterfaceName } from '@redux/fightReducer';\r\nimport { inventoryItemsInfo } from 'common/inventoryItemsInfo';\r\nimport { InventoryItem, InventoryItemName } from 'commonTypes';\r\nimport TypeWriter from 'components/typeWriter/typeWriter';\r\nimport { useEffect, useState } from 'react';\r\nimport s from './inventoryInterface.module.scss'\r\n\r\ntype InventoryInterfaceProps = {\r\n    inventory: Array<InventoryItem>\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    employInventoryItem: (itemName: InventoryItemName) => void\r\n}\r\n\r\nconst InventoryInterface: React.FC<InventoryInterfaceProps> = ({ setDisplayingFightInterface, employInventoryItem, ...props }) => {\r\n    const [focusItem, setFocusItem] = useState<null | InventoryItemName>(null)\r\n\r\n    if (props.inventory.length === 0) return (\r\n        <div className={`${s.emptyInventoryInterface} arenaInterfaceContainer`}>\r\n            <div className={s.emptyInventoryInterface__text}>\r\n                <TypeWriter text='My inventory is empty...' whatToDoAtTheEnd={() => setTimeout(() => setDisplayingFightInterface('defaultInterface'), 700)} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className={`${s.inventoryInterface} arenaInterfaceContainer`}>\r\n            <div className={s.inventoryInterface__items}>\r\n                {props.inventory.map(item =>\r\n                    <button key={item.name} className={s.inventoryInterface__items_btn}\r\n                        onMouseOver={() => setFocusItem(item.name)}\r\n                        onMouseLeave={() => setFocusItem(null)}\r\n                        onClick={() => {\r\n                            employInventoryItem(item.name)\r\n                            setDisplayingFightInterface('defaultInterface')\r\n                        }}\r\n                    >\r\n                        <img src={inventoryItemsInfo[item.name].img} alt={item.name}\r\n                            className={s.inventoryInterface__items_btn_img} />\r\n                        <p className={s.inventoryInterface__items_btn_count}>{item.count}</p>\r\n                    </button>\r\n                )}\r\n            </div>\r\n            {!focusItem ?\r\n                <button className={s.inventoryInterface__backBtn}\r\n                    onClick={() => setDisplayingFightInterface('defaultInterface')}\r\n                >\r\n                    <p>Close Inventory</p>\r\n                </button>\r\n                : (\r\n                    <p className={s.inventoryInterface__itemDescription}>\r\n                        {inventoryItemsInfo[focusItem].description === '' ? <br />\r\n                            : inventoryItemsInfo[focusItem].description}\r\n                    </p>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InventoryInterface","import React, { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport s from './arena.module.scss'\r\nimport { ArenaProps } from \"./arenaContainer\"\r\nimport settings from 'settings'\r\nimport DefaultInterface from \"./defaultInterface/defaultInterface\"\r\nimport EquationInterface from \"./equationInterface/equationInterface\"\r\nimport QuestionInterface from \"./questionInterface/questionInterface\"\r\nimport TypeWriterTransparentBtn from \"components/typeWriter/typeWriterTransparentBtn\"\r\nimport InventoryInterface from \"./inventoryInterface/inventoryInterface\"\r\nimport RenderImg from \"components/renderImg\"\r\nimport bossfightBackground from '@assets/imgs/bossfightBackground.gif'\r\n\r\n\r\nconst Arena: React.FC<ArenaProps> = ({ swapAttackerAndReceiving, makeAttack, answerEquation, answerQuestion, setSceneWithTransition, overcomeCurrentEnemy, setNewLocation, setDisplayingFightInterface, employInventoryItem, ...props }) => {\r\n    const playerIsAttacker = (props.attacker === 'player' && props.playerHealthPoints > 0)\r\n    const enemyBeatenEnough = true // props.enemyHealthPoints <= requiredEnemyHealthPointsForConversation\r\n    const escape = () => setSceneWithTransition(\"LocationMap\")\r\n    const [enemysOpacity, setEnemysOpacity] = useState<number>(1)\r\n\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, settings.delayForScenes)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    // logic of the timer end: \r\n    useEffect(() => {\r\n        if (props.timeForAnswer === 0) {\r\n            answerEquation('noAnswer')\r\n        }\r\n    }, [props.timeForAnswer])\r\n\r\n    // logic of the end of the battle:\r\n    useEffect(() => { //if player died\r\n        if (props.playerHealthPoints !== null && props.playerHealthPoints <= 0) {\r\n            setTimeout(() => {\r\n                setSceneWithTransition('GameOver')\r\n            }, settings.changingHealthPointsTransition)\r\n        }\r\n    }, [props.playerHealthPoints])\r\n\r\n    useEffect(() => { //if victoryMethod === 'kill'\r\n        if (props.enemyHealthPoints !== null && props.enemyHealthPoints <= 0) {\r\n            overcomeCurrentEnemy(\"kill\")\r\n            setTimeout(() => {\r\n                setEnemysOpacity(0)\r\n            }, settings.changingHealthPointsTransition)\r\n            setTimeout(() => {\r\n                if (props.enemyType === \"mainBoss\") {\r\n                    setSceneWithTransition('LocationMap')\r\n                }\r\n                else setSceneWithTransition('ImprovementScreen')\r\n            }, settings.changingHealthPointsTransition + settings.timeForEnemysDie)\r\n            setTimeout(() => {\r\n                if (props.enemyType === \"mainBoss\") {\r\n                    setNewLocation()\r\n                }\r\n            }, settings.changingHealthPointsTransition + settings.timeForEnemysDie + settings.opacityTransition)\r\n        }\r\n    }, [props.enemyHealthPoints])\r\n    useEffect(() => { //if victoryMethod === 'talk'\r\n        if (props.enemyQuestions !== null && props.enemyQuestions.length === 0) { // if enemyType==='mainBoss' this expression return false\r\n            overcomeCurrentEnemy(\"talk\")\r\n            setTimeout(() => {\r\n                setEnemysOpacity(0)\r\n            }, settings.changingHealthPointsTransition) // i can use any amount of time there\r\n            setTimeout(() => {\r\n                setSceneWithTransition('ImprovementScreen')\r\n            }, settings.changingHealthPointsTransition + settings.timeForEnemysDie)\r\n            setTimeout(() => {\r\n                setDisplayingFightInterface(\"defaultInterface\")\r\n            }, settings.changingHealthPointsTransition + settings.timeForEnemysDie + settings.opacityTransition)\r\n        }\r\n    }, [props.enemyQuestions])\r\n\r\n    return (\r\n        <div className={s.arena} >\r\n            <div className={s.arena__scene}>\r\n                <RenderImg src={props.enemyType === \"mainBoss\" ? bossfightBackground : props.fightBackgroundImg} alt=\"background\" className={s.arena__scene_backgroundImg} />\r\n                {props.enemyEffects.length > 0 &&\r\n                    <div className={s.arena__scene_enemyEffects}>\r\n                        {props.enemyEffects.map(ef =>\r\n                            <div className={s.arena__scene_enemyEffects_effect} key={ef.name}>\r\n                                <p className={s.arena__scene_enemyEffects_effect_name}>\r\n                                    {ef.name}:\r\n                                </p>\r\n                                <p className={s.arena__scene_enemyEffects_effect_number}\r\n                                    style={{ width: `${ef.duration.toString().length * 2.15}vh` }}\r\n                                >\r\n                                    {ef.duration}\r\n                                </p>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                }\r\n                <div className={s.arena__scene_content}>\r\n                    <div className={s.arena__scene_content_healthBars}>\r\n                        <div className={`${s.arena__scene_content_healthBars_container} ${playerIsAttacker ? s.attacker : ``}`}>\r\n                            <div className={s.arena__scene_content_healthBars_container_health} style={{ width: `${props.playerHealthPoints}%`, transition: `all ${settings.changingHealthPointsTransition}ms` }} />\r\n                            <p className={s.arena__scene_content_healthBars_container_name}>{props.playerHealthPoints}</p>\r\n                        </div>\r\n                        <div className={`${s.arena__scene_content_healthBars_container}`}>\r\n                            <div className={s.arena__scene_content_healthBars_container_health} style={{ width: `0%` }} />\r\n                            <p className={s.arena__scene_content_healthBars_container_name}>\r\n                                {props.enemyHealthPoints === 0 ? 'PLAYER' :\r\n                                    props.playerHealthPoints === 0 ? 'ENEMY' :\r\n                                        props.attacker.toUpperCase()}'S TURN\r\n                            </p>\r\n                        </div>\r\n                        <div className={`${s.arena__scene_content_healthBars_container} ${!playerIsAttacker ? s.attacker : ``}`}>\r\n                            <div className={s.arena__scene_content_healthBars_container_health} style={{ width: `${(props.enemyType === 'mainBoss' ? props.enemyHealthPoints / 2 : props.enemyHealthPoints)}%`, transition: `all ${settings.changingHealthPointsTransition}ms` }} />\r\n                            <p className={s.arena__scene_content_healthBars_container_name}>{props.enemyHealthPoints}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.arena__scene_content_figthers}>\r\n                        <div className={s.arena__scene_content_figthers_fighter} style={{ left: `${props.playerPositionOnScreen}%` }}>\r\n                            <div className={s.arena__scene_content_figthers_fighter_relativeContainer}>\r\n                                <img src={props.playerDefaultImg} alt=\"Player\" className={s.arena__scene_content_figthers_fighter_relativeContainer_img} />\r\n                            </div>\r\n                        </div>\r\n                        <div className={s.arena__scene_content_figthers_fighter} style={{ right: `${props.enemyPositionOnScreen}%`, opacity: `${enemysOpacity}`, transition: `opacity ${settings.timeForEnemysDie}ms` }}>\r\n                            <div className={s.arena__scene_content_figthers_fighter_relativeContainer}>\r\n                                <img src={props.enemyDefaultImg} alt=\"Enemy\" className={s.arena__scene_content_figthers_fighter_relativeContainer_img} id={s.enemyImg}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.arena__interface}>\r\n                {\r\n                    props.displayingFightInterface === 'questionInterface' ?\r\n                        <QuestionInterface answerQuestion={answerQuestion} enemyQuestions={props.enemyQuestions} setDisplayingFightInterface={setDisplayingFightInterface} enemyBeatenEnough={enemyBeatenEnough} />\r\n                        : (\r\n                            props.displayingFightInterface === \"equationInterface\" ?\r\n                                <EquationInterface answerEquation={answerEquation} timeForAnswer={props.timeForAnswer} equation={props.equation} />\r\n                                : (\r\n                                    props.displayingFightInterface === \"inventoryInterface\" ?\r\n                                        <InventoryInterface setDisplayingFightInterface={setDisplayingFightInterface} inventory={props.inventory} employInventoryItem={employInventoryItem} />\r\n                                        : <DefaultInterface attack={makeAttack} playerIsAttacker={playerIsAttacker} playerHealthPoints={props.playerHealthPoints} enemyHealthPoints={props.enemyHealthPoints} escape={escape} setDisplayingFightInterface={setDisplayingFightInterface} fightInfo={props.fightInfo} />\r\n                                )\r\n                        )\r\n                }\r\n                <TypeWriterTransparentBtn /> {/*diplay: 'none' if TypeWriter doesn't write*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Arena","import { AppStateType } from \"redux/store\"\r\nimport { connect } from \"react-redux\"\r\nimport Arena from \"./arena\"\r\nimport { swapAttackerAndReceiving, makeAttack, answerEquation, answerQuestion, EnteredEquationAnswer, overcomeCurrentEnemy, setDisplayingFightInterface, FightInterfaceName } from \"@redux/fightReducer\"\r\nimport { employInventoryItem } from \"@redux/playerReducer\"\r\nimport { setSceneWithTransition, setCurrentSceneDidMount } from \"@redux/sceneReducer\"\r\nimport { SceneName } from \"scenes\"\r\nimport { setNewLocation } from \"@redux/locationReducer\"\r\nimport { InventoryItemName } from \"commonTypes\"\r\n\r\nexport type ArenaProps = StatePropsType & DispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    playerName: state.player.name,\r\n    playerDefaultImg: state.player.defaultImg,\r\n    playerHealthPoints: state.player.healthPoints,\r\n    enemyName: state.enemy.name,\r\n    enemyType: state.enemy.enemyType,\r\n    enemyDefaultImg: state.enemy.defaultImg,\r\n    enemyHealthPoints: state.enemy.healthPoints,\r\n    enemyQuestions: state.enemy.questions,\r\n    enemyEffects: state.enemy.currentEffects,\r\n    attacker: state.fight.attacker,\r\n    inventory: state.player.inventory,\r\n\r\n    fightBackgroundImg: state.location.fightBackgroundImg,\r\n\r\n    fightInfo: state.fight.fightInfo,\r\n\r\n    equation: state.fight.equation,\r\n    timeForAnswer: state.fight.timeForAnswer,\r\n\r\n    playerPositionOnScreen: state.player.positionOnArenaScreen,\r\n    enemyPositionOnScreen: state.enemy.positionOnArenaScreen,\r\n\r\n    displayingFightInterface: state.fight.displayingFightInterface,\r\n\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n})\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n    swapAttackerAndReceiving: () => void\r\n    makeAttack: () => void\r\n    answerEquation: (enteredAnswer: EnteredEquationAnswer) => void\r\n    answerQuestion: (enteredAnswer: string) => void\r\n    overcomeCurrentEnemy: (method: 'talk' | 'kill') => void\r\n    setNewLocation: () => void\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    employInventoryItem: (itemName: InventoryItemName) => void\r\n}\r\n\r\nexport default connect(mapStateToProps, { swapAttackerAndReceiving, employInventoryItem, makeAttack, answerEquation, answerQuestion, setSceneWithTransition, overcomeCurrentEnemy, setNewLocation, setDisplayingFightInterface, setCurrentSceneDidMount })(Arena)","import { connect } from \"react-redux\"\r\nimport { changeUnloadedImagesQuantity } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\ntype RenderImgOwnProps = {\r\n    src: string | undefined\r\n    alt?: string\r\n    className?: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: RenderImgOwnProps) => ({\r\n    src: ownProps.src,\r\n    alt: ownProps.alt,\r\n    className: ownProps.className\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    changeUnloadedImagesQuantity: (action: \"PLUS_ONE\" | \"MINUS_ONE\") => void\r\n}\r\n\r\ntype RenderImgProps = ReturnType<typeof mapStateToProps> & MapDispatchToProps\r\n\r\nconst RenderImg: React.FC<RenderImgProps> = ({ src, alt = 'img', className = undefined, changeUnloadedImagesQuantity }) => {\r\n\r\n    useEffect(() => {\r\n        changeUnloadedImagesQuantity(\"PLUS_ONE\")\r\n    }, [])\r\n\r\n    return (\r\n        <img src={src} alt={alt} className={className} onLoad={() => changeUnloadedImagesQuantity(\"MINUS_ONE\")} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { changeUnloadedImagesQuantity })(RenderImg)","import { useEffect, useState } from \"react\"\r\nimport typewriterSound from '@assets/sounds/typewriterSound.mp3'\r\nimport useSound from \"use-sound\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { setTypeWriterIsWriting, setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { connect } from \"react-redux\"\r\n\r\nconst delayBeforeFirstSymbol = 300\r\nconst defaultDelayBeforeNextSymbol = 80\r\n\r\ntype TypeWriterOwnProps = {\r\n    text: string\r\n    whatToDoAtTheEnd?: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: TypeWriterOwnProps) => ({\r\n    ...ownProps,\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n    typeWriterStopped: state.game.typeWriterStopped,\r\n    opacity: state.scene.opacity,\r\n    soundValue: state.game.soundValue\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterIsWriting: (isWriting: boolean) => void\r\n    setTypeWriterStopped: (wasStop: boolean) => void\r\n}\r\n\r\ntype TypeWriterProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriter: React.FC<TypeWriterProps> = ({ text, typeWriterStopped, opacity, soundValue, setTypeWriterStopped, setTypeWriterIsWriting, whatToDoAtTheEnd = () => { } }) => {\r\n    const [play, { stop }] = useSound(typewriterSound, { volume: soundValue === \"OFF\" ? 0 : 0.5 });\r\n    const [newText, setNewText] = useState<string>('')\r\n    const [letterNumber, setLetterNumber] = useState<number>(0)\r\n    const [firstSimbolDisplayed, setFirstSimbolDisplayed] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setTypeWriterStopped(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTypeWriterStopped(false)\r\n        setLetterNumber(0)\r\n        setNewText('')\r\n        setFirstSimbolDisplayed(false)\r\n        setTypeWriterIsWriting(true)\r\n    }, [text])\r\n\r\n    useEffect(() => {\r\n        if (typeWriterStopped) {\r\n            setTypeWriterIsWriting(false)\r\n            whatToDoAtTheEnd()\r\n        }\r\n    }, [typeWriterStopped])\r\n\r\n    useEffect(() => {\r\n        if (!typeWriterStopped && opacity === 1) {\r\n            setTimeout(() => {\r\n                if (newText.length !== text.length) {\r\n                    setTimeout(() => {\r\n                        stop()\r\n                        if (!typeWriterStopped) play()\r\n                        setNewText(newText + text.charAt(letterNumber))\r\n                        setFirstSimbolDisplayed(true)\r\n                        setLetterNumber(letterNumber + 1)\r\n                    }, defaultDelayBeforeNextSymbol)\r\n                } else {\r\n                    setTypeWriterStopped(true)\r\n                }\r\n            }, firstSimbolDisplayed ? 0 : (delayBeforeFirstSymbol))\r\n        }\r\n    }, [newText, opacity])\r\n\r\n    return <p>\r\n        {typeWriterStopped ? text : newText}\r\n    </p>\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterIsWriting, setTypeWriterStopped })(TypeWriter)","import { setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { AppStateType } from '@redux/store'\r\nimport { connect } from 'react-redux'\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterStopped: (isStop: boolean) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n})\r\n\r\ntype TypeWriterTransparentBtnProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriterTransparentBtn: React.FC<TypeWriterTransparentBtnProps> = ({ setTypeWriterStopped, typeWriterIsWriting }) => {\r\n    return (\r\n        <button className='transparentAbsoluteBtn'\r\n            style={{ display: `${typeWriterIsWriting ? 'initial' : 'none'}` }}\r\n            onClick={() => setTypeWriterStopped(true)} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterStopped })(TypeWriterTransparentBtn)"],"names":["inventoryItemsInfo","img","healingPotionImg","description","settings","cost","freezingPotionImg","poisonPotionImg","attack","escape","setDisplayingFightInterface","props","buttonsDisable","playerIsAttacker","enemyHealthPoints","playerHealthPoints","className","s","onClick","disabled","fightInfo","CustomField","formik","name","autoFocus","placeholder","toUpperCase","autoComplete","onChange","e","value","currentTarget","test","toString","setFieldValue","answerEquation","equation","src","alt","split","length","map","el","initialValues","x","y","onSubmit","values","timeForAnswer","type","answerQuestion","randomInt","useMemo","Math","floor","random","enemyQuestions","useState","questionWasDisplayed","setQuestionWasDisplayed","currentQuestion","setCurrentQuestion","useEffect","enemyBeatenEnough","text","question","whatToDoAtTheEnd","answers","correctAnswer","incorrectAnswer","setTimeout","employInventoryItem","focusItem","setFocusItem","inventory","item","onMouseOver","onMouseLeave","count","swapAttackerAndReceiving","makeAttack","setSceneWithTransition","overcomeCurrentEnemy","setNewLocation","attacker","enemysOpacity","setEnemysOpacity","unloadedImagesQuantity","currentSceneDidMount","setCurrentSceneDidMount","enemyType","bossfightBackground","fightBackgroundImg","enemyEffects","ef","style","width","duration","transition","left","playerPositionOnScreen","playerDefaultImg","right","enemyPositionOnScreen","opacity","enemyDefaultImg","id","displayingFightInterface","connect","state","playerName","player","defaultImg","healthPoints","enemyName","enemy","questions","currentEffects","fight","location","positionOnArenaScreen","scene","Arena","ownProps","changeUnloadedImagesQuantity","undefined","onLoad","typeWriterIsWriting","game","typeWriterStopped","soundValue","setTypeWriterIsWriting","setTypeWriterStopped","useSound","typewriterSound","volume","play","stop","newText","setNewText","letterNumber","setLetterNumber","firstSimbolDisplayed","setFirstSimbolDisplayed","charAt","display"],"sourceRoot":""}