{"version":3,"file":"static/js/410.62b9cebe.chunk.js","mappings":"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","sources":["webpack://rpg/./src/components/main/choosePlayer/choosePlayer.module.scss?c40f","components/main/choosePlayer/choosePlayer.tsx","components/main/choosePlayer/choosePlayerContainer.tsx","components/typeWriter/typeWriter.tsx","components/typeWriter/typeWriterTransparentBtn.tsx","../node_modules/use-sound/src/index.ts","../node_modules/use-sound/src/use-on-mount.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"choosePlayer\":\"choosePlayer_choosePlayer__2v5TK\",\"choosePlayer__scene\":\"choosePlayer_choosePlayer__scene__VUF1Y\",\"choosePlayer__scene_heroImg\":\"choosePlayer_choosePlayer__scene_heroImg__3EP2l\",\"choosePlayer__interface\":\"choosePlayer_choosePlayer__interface__XBwuu\",\"choosePlayer__interface_container\":\"choosePlayer_choosePlayer__interface_container__waWVK\",\"choosePlayer__interface_container_question\":\"choosePlayer_choosePlayer__interface_container_question__oh4m4\",\"choosePlayer__interface_container_answers\":\"choosePlayer_choosePlayer__interface_container_answers__Hoopb\",\"choosePlayer__interface_container_answers_button\":\"choosePlayer_choosePlayer__interface_container_answers_button__InNCo\"};","import { HeroName } from \"@base/heroes\"\r\nimport TypeWriter from \"components/typeWriter/typeWriter\"\r\nimport { useEffect, useState } from \"react\"\r\nimport settings from \"settings\"\r\nimport { ChoosePlayerProps } from \"./choosePlayerContainer\"\r\nimport s from './choosePlayer.module.scss'\r\nimport warriorImg from '@sprites/playerImgs/playerWarriorDefaultImg.jpg'\r\nimport magicianImg from '@sprites/playerImgs/playerMagicianDefaultImg.jpg'\r\nimport TypeWriterTransparentBtn from \"components/typeWriter/typeWriterTransparentBtn\"\r\n\r\nconst heroesImgs = {\r\n    warrior: warriorImg,\r\n    magician: magicianImg\r\n}\r\n\r\nconst ChoosePlayer: React.FC<ChoosePlayerProps> = (props) => {\r\n    const [textWasDisplayed, setTextWasDisplayed] = useState<boolean>(false)\r\n    const [focusHero, setFocusHero] = useState<HeroName | null>(null)\r\n    const [heroWasChosen, setHeroWasChosen] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, settings.delayForScenes)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    const сhooseHero = (hero: HeroName) => {\r\n        setHeroWasChosen(true)\r\n        props.setNewLocation()\r\n        props.chooseHero(hero)\r\n        props.setSceneWithTransition(\"Cutscene\")\r\n    }\r\n\r\n    return (\r\n        <div className={s.choosePlayer}>\r\n            <div className={s.choosePlayer__scene}>\r\n                {focusHero &&\r\n                    <img src={heroesImgs[focusHero]} alt={`${focusHero}Img`} className={s.choosePlayer__scene_heroImg} />\r\n                }\r\n            </div>\r\n            <div className={s.choosePlayer__interface}>\r\n                <TypeWriterTransparentBtn />\r\n                <div className={s.choosePlayer__interface_container}>\r\n                    <div className={s.choosePlayer__interface_container_question}>\r\n                        <TypeWriter\r\n                            text={'How do yo see yourself ?'}\r\n                            whatToDoAtTheEnd={() => setTextWasDisplayed(true)}\r\n                        />\r\n                    </div>\r\n                    {textWasDisplayed &&\r\n                        <div className={s.choosePlayer__interface_container_answers}>\r\n                            <button className={s.choosePlayer__interface_container_answers_button}\r\n                                onClick={() => сhooseHero('warrior')}\r\n                                onMouseOver={() => setFocusHero('warrior')}\r\n                                onMouseLeave={() => setFocusHero(heroWasChosen ? 'warrior' : null)}\r\n                            >\r\n                                <p>Warrior (easy difficulty)</p>\r\n                            </button>\r\n                            <button className={s.choosePlayer__interface_container_answers_button}\r\n                                onClick={() => сhooseHero('magician')}\r\n                                onMouseOver={() => setFocusHero('magician')}\r\n                                onMouseLeave={() => setFocusHero(heroWasChosen ? 'magician' : null)}\r\n                            >\r\n                                <p>Magician (hard difficulty)</p>\r\n                            </button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChoosePlayer","import { connect } from \"react-redux\"\r\nimport ChoosePlayer from \"./choosePlayer\"\r\nimport { chooseHero } from \"@redux/playerReducer\"\r\nimport { setSceneWithTransition, setCurrentSceneDidMount} from \"@redux/sceneReducer\"\r\nimport { setNewLocation } from \"@redux/locationReducer\"\r\nimport { SceneName } from \"scenes\"\r\nimport { HeroName } from \"base/heroes\"\r\nimport { AppStateType } from \"@redux/store\"\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n})\r\n\r\ntype DispatchPropsType = {\r\n    chooseHero: (heroName: HeroName) => void\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n    setNewLocation: () => void\r\n}\r\n\r\nexport type ChoosePlayerProps = DispatchPropsType & ReturnType<typeof mapStateToProps>\r\n\r\nexport default connect(mapStateToProps, { chooseHero, setSceneWithTransition, setNewLocation, setCurrentSceneDidMount})(ChoosePlayer)","import { useEffect, useState } from \"react\"\r\nimport typewriterSound from '@assets/sounds/typewriterSound.mp3'\r\nimport useSound from \"use-sound\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { setTypeWriterIsWriting, setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { connect } from \"react-redux\"\r\n\r\nconst delayBeforeFirstSymbol = 300\r\nconst defaultDelayBeforeNextSymbol = 80\r\n\r\ntype TypeWriterOwnProps = {\r\n    text: string\r\n    whatToDoAtTheEnd?: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: TypeWriterOwnProps) => ({\r\n    ...ownProps,\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n    typeWriterStopped: state.game.typeWriterStopped,\r\n    opacity: state.scene.opacity,\r\n    soundValue: state.game.soundValue\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterIsWriting: (isWriting: boolean) => void\r\n    setTypeWriterStopped: (wasStop: boolean) => void\r\n}\r\n\r\ntype TypeWriterProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriter: React.FC<TypeWriterProps> = ({ text, typeWriterStopped, opacity, soundValue, setTypeWriterStopped, setTypeWriterIsWriting, whatToDoAtTheEnd = () => { } }) => {\r\n    const [play, { stop }] = useSound(typewriterSound, { volume: soundValue === \"OFF\" ? 0 : 0.5 });\r\n    const [newText, setNewText] = useState<string>('')\r\n    const [letterNumber, setLetterNumber] = useState<number>(0)\r\n    const [firstSimbolDisplayed, setFirstSimbolDisplayed] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setTypeWriterStopped(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTypeWriterStopped(false)\r\n        setLetterNumber(0)\r\n        setNewText('')\r\n        setFirstSimbolDisplayed(false)\r\n        setTypeWriterIsWriting(true)\r\n    }, [text])\r\n\r\n    useEffect(() => {\r\n        if (typeWriterStopped) {\r\n            setTypeWriterIsWriting(false)\r\n            whatToDoAtTheEnd()\r\n        }\r\n    }, [typeWriterStopped])\r\n\r\n    useEffect(() => {\r\n        if (!typeWriterStopped && opacity === 1) {\r\n            setTimeout(() => {\r\n                if (newText.length !== text.length) {\r\n                    setTimeout(() => {\r\n                        stop()\r\n                        if (!typeWriterStopped) play()\r\n                        setNewText(newText + text.charAt(letterNumber))\r\n                        setFirstSimbolDisplayed(true)\r\n                        setLetterNumber(letterNumber + 1)\r\n                    }, defaultDelayBeforeNextSymbol)\r\n                } else {\r\n                    setTypeWriterStopped(true)\r\n                }\r\n            }, firstSimbolDisplayed ? 0 : (delayBeforeFirstSymbol))\r\n        }\r\n    }, [newText, opacity])\r\n\r\n    return <p>\r\n        {typeWriterStopped ? text : newText}\r\n    </p>\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterIsWriting, setTypeWriterStopped })(TypeWriter)","import { setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { AppStateType } from '@redux/store'\r\nimport { connect } from 'react-redux'\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterStopped: (isStop: boolean) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n})\r\n\r\ntype TypeWriterTransparentBtnProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriterTransparentBtn: React.FC<TypeWriterTransparentBtnProps> = ({ setTypeWriterStopped, typeWriterIsWriting }) => {\r\n    return (\r\n        <button className='transparentAbsoluteBtn'\r\n            style={{ display: `${typeWriterIsWriting ? 'initial' : 'none'}` }}\r\n            onClick={() => setTypeWriterStopped(true)} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterStopped })(TypeWriterTransparentBtn)","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["heroesImgs","warrior","warriorImg","magician","magicianImg","props","useState","textWasDisplayed","setTextWasDisplayed","focusHero","setFocusHero","heroWasChosen","setHeroWasChosen","useEffect","unloadedImagesQuantity","currentSceneDidMount","setTimeout","setCurrentSceneDidMount","settings","сhooseHero","hero","setNewLocation","chooseHero","setSceneWithTransition","className","s","src","alt","text","whatToDoAtTheEnd","onClick","onMouseOver","onMouseLeave","connect","state","scene","ChoosePlayer","ownProps","typeWriterIsWriting","game","typeWriterStopped","opacity","soundValue","setTypeWriterIsWriting","setTypeWriterStopped","useSound","typewriterSound","volume","play","stop","newText","setNewText","letterNumber","setLetterNumber","firstSimbolDisplayed","setFirstSimbolDisplayed","length","charAt","style","display","callback","id","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","React","isMounted","duration","setDuration","sound","setSound","handleLoad","call","this","current","then","mod","Howl","Array","isArray","rate","JSON","stringify","options","forceSoundEnabled","pause"],"sourceRoot":""}