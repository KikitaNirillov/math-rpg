{"version":3,"file":"static/js/5056.af2dace2.chunk.js","mappings":"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","sources":["common/inventoryItemsInfo.ts","webpack://rpg/./src/components/main/locationMap/inn/inn.module.scss?8fdd","components/main/locationMap/inn/inn.tsx","components/main/locationMap/inn/innContainer.tsx","webpack://rpg/./src/components/main/locationMap/locationMap.module.scss?7a76","webpack://rpg/./src/components/main/locationMap/store/store.module.scss?563c","components/main/locationMap/store/store.tsx","components/main/locationMap/store/storeContainer.tsx","components/main/locationMap/locationMap.tsx","components/main/locationMap/locationMapContainer.tsx","components/renderImg.tsx"],"sourcesContent":["import { InventoryItemName } from \"commonTypes\";\r\nimport healingPotionImg from \"assets/imgs/potions/healingPotionImg.png\"\r\nimport freezingPotionImg from \"assets/imgs/potions/freezingPotionImg.png\"\r\nimport poisonPotionImg from \"assets/imgs/potions/poisonPotionImg.png\"\r\nimport settings from \"settings\";\r\n\r\ntype ItemInfo = {\r\n    img: string\r\n    description: string\r\n    cost: number\r\n}\r\nexport const inventoryItemsInfo: Record<InventoryItemName, ItemInfo> = {\r\n    'Healing potion': {\r\n        img: healingPotionImg,\r\n        description: `Restore ${settings.addedHealthPointsByHealthPotion} health points`,\r\n        cost: 2,\r\n    },\r\n    'Freezing potion': {\r\n        img: freezingPotionImg,\r\n        description: `Freeze the enemy for ${settings.durationOfFreezing} him moves`,\r\n        cost: 4,\r\n    },\r\n    'Poison potion': {\r\n        img: poisonPotionImg,\r\n        description: `Add ${settings.additionalDamageByPoison} damage for ${settings.durationOfPoison} your moves`,\r\n        cost: 5,\r\n    },\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"inn\":\"inn_inn__mD0FL\",\"inn__healthInfo\":\"inn_inn__healthInfo__WhdCW\",\"inn__healthInfo_bar\":\"inn_inn__healthInfo_bar__2pYVZ\",\"inn__healthInfo_bar_stripe\":\"inn_inn__healthInfo_bar_stripe__zDhW9\",\"inn__healthInfo_bar_points\":\"inn_inn__healthInfo_bar_points__A1aNz\",\"inn__title\":\"inn_inn__title__o39vB\",\"inn__title_img\":\"inn_inn__title_img__mz7vU\",\"inn__buttonList\":\"inn_inn__buttonList__0WG53\",\"inn__buttonList_button\":\"inn_inn__buttonList_button__NSUr5\"};","import settings from 'settings'\r\nimport s from './inn.module.scss'\r\nimport { InnProps } from './innContainer'\r\n\r\nconst Inn: React.FC<InnProps> = ({ setPlayerHealthPoints, closeLocationMapWindow, ...props }) => {\r\n    const disableYesBtn = props.coins < settings.pricePerInn || props.playerHealthPoints === 100\r\n    const sleep = () => {\r\n        \r\n        setPlayerHealthPoints(100)\r\n    }\r\n    return (\r\n        <div className={`${s.inn} locationMapWindow`}>\r\n            <div className={s.inn__healthInfo}>\r\n                <p className={s.inn__healthInfo_title}>Your health:</p>\r\n                <div className={s.inn__healthInfo_bar}>\r\n                    <div className={s.inn__healthInfo_bar_stripe} style={{ width: `${props.playerHealthPoints}%`, transition: `all ${settings.changingHealthPointsTransition}ms` }} />\r\n                    <p className={s.inn__healthInfo_bar_points}>{props.playerHealthPoints}</p>\r\n                </div>\r\n            </div>\r\n            <div className={s.inn__title}>\r\n                <p className={s.inn__title_text}>Do you want restore your healt by 3</p>\r\n                <img src={props.currencyImg || ''} alt=\"currency\" className={s.inn__title_img} />\r\n                <p className={s.inn__title_text}>?</p>\r\n            </div>\r\n            <div className={s.inn__buttonList}>\r\n                <button className={s.inn__buttonList_button} onClick={sleep} disabled={disableYesBtn}>\r\n                    Yes\r\n                </button>\r\n                <button className={s.inn__buttonList_button} onClick={() => closeLocationMapWindow()}>\r\n                    No\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inn","import { AppStateType } from \"@redux/store\";\r\nimport { connect } from \"react-redux\";\r\nimport Inn from \"./inn\";\r\nimport { setPlayerHealthPoints } from \"@redux/playerReducer\";\r\n\r\ntype InnOwnProps = {\r\n    closeLocationMapWindow: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: InnOwnProps) => ({\r\n    playerHealthPoints: state.player.healthPoints,\r\n    currencyImg: state.location.currencyImg,\r\n    coins: state.player.coins,\r\n    closeLocationMapWindow: ownProps.closeLocationMapWindow,\r\n})\r\n\r\ntype DispatchPropsType = {\r\n    setPlayerHealthPoints: (newHealthPoints: number) => void\r\n}\r\n\r\nexport type InnProps = ReturnType<typeof mapStateToProps> & DispatchPropsType\r\n\r\nexport default connect(mapStateToProps, { setPlayerHealthPoints })(Inn)","// extracted by mini-css-extract-plugin\nexport default {\"locationMapScreen\":\"locationMap_locationMapScreen__PXsJn\",\"coins\":\"locationMap_coins__C7xm9\",\"coins_img\":\"locationMap_coins_img__9bWiR\",\"nowItsBackground\":\"locationMap_nowItsBackground__yq9JE\",\"locationMap\":\"locationMap_locationMap__zypAZ\",\"locationMap__backgroundImg\":\"locationMap_locationMap__backgroundImg__nk11y\",\"locationMap__onFocusInfo\":\"locationMap_locationMap__onFocusInfo__L0FHS\",\"locationMap__buttonList\":\"locationMap_locationMap__buttonList__caFXY\",\"locationMap__buttonList_innBtn\":\"locationMap_locationMap__buttonList_innBtn__WRs9W\",\"locationMap__buttonList_innBtn_icon\":\"locationMap_locationMap__buttonList_innBtn_icon__4AUKl\",\"location3\":\"locationMap_location3__fRYzp\",\"locationMap__buttonList_storeBtn\":\"locationMap_locationMap__buttonList_storeBtn__sS-O7\",\"locationMap__buttonList_storeBtn_icon\":\"locationMap_locationMap__buttonList_storeBtn_icon__nxgCs\",\"locationMap__buttonList_bossBtn\":\"locationMap_locationMap__buttonList_bossBtn__8aUlE\",\"locationMap__buttonList_bossBtn_icon\":\"locationMap_locationMap__buttonList_bossBtn_icon__sRcwp\",\"locationMap__buttonList_lairBtn\":\"locationMap_locationMap__buttonList_lairBtn__o+-vH\",\"locationMap__buttonList_lairBtn_icon\":\"locationMap_locationMap__buttonList_lairBtn_icon__JimZ7\",\"location1\":\"locationMap_location1__BuIOd\"};","// extracted by mini-css-extract-plugin\nexport default {\"store\":\"store_store__5Xnkg\",\"store__purchase\":\"store_store__purchase__NiqQI\",\"store__purchase_itemsList\":\"store_store__purchase_itemsList__eqAUx\",\"store__purchase_itemsList_btn\":\"store_store__purchase_itemsList_btn__50pwE\",\"store__purchase_itemsList_btn_img\":\"store_store__purchase_itemsList_btn_img__DkST9\",\"store__purchase_itemsList_btn_cost\":\"store_store__purchase_itemsList_btn_cost__djLIL\",\"store__purchase_itemsList_btn_cost_count\":\"store_store__purchase_itemsList_btn_cost_count__o4YXH\",\"store__purchase_itemsList_btn_cost_currency\":\"store_store__purchase_itemsList_btn_cost_currency__LMbby\",\"store__inventory\":\"store_store__inventory__8ogWE\",\"store__inventory_itemsList\":\"store_store__inventory_itemsList__QfKc2\",\"store__inventory_itemsList_item\":\"store_store__inventory_itemsList_item__w-evJ\",\"store__inventory_itemsList_item_img\":\"store_store__inventory_itemsList_item_img__jJjyC\",\"store__inventory_itemsList_item_count\":\"store_store__inventory_itemsList_item_count__pwnWq\",\"store__leaveBtn\":\"store_store__leaveBtn__72Ei4\"};","import { inventoryItemsInfo } from 'common/inventoryItemsInfo';\r\nimport { InventoryItemName } from 'commonTypes';\r\nimport { useState } from 'react';\r\nimport s from './store.module.scss'\r\nimport { StoreProps } from './storeContainer';\r\n\r\nconst Store: React.FC<StoreProps> = ({ closeLocationMapWindow, buyInventoryItem, ...props }) => {\r\n    const [focusItem, setFocusItem] = useState<null | InventoryItemName | 'noMoneyForBuy'>(null)\r\n    return (\r\n        <div className={`${s.store} locationMapWindow`}>\r\n            <p>Store:</p>\r\n            <div className={s.store__purchase}>\r\n                <div className={s.store__purchase_itemsList}>\r\n                    {\r\n                        Object.keys(inventoryItemsInfo).map(itemName =>\r\n                            <button key={itemName}\r\n                                className={s.store__purchase_itemsList_btn}\r\n                                onMouseOver={() => setFocusItem(itemName as keyof typeof inventoryItemsInfo)}\r\n                                onMouseLeave={() => setFocusItem(null)}\r\n                                onClick={() => {\r\n                                    if (props.coins < inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].cost)\r\n                                        setFocusItem('noMoneyForBuy')\r\n                                    else buyInventoryItem(itemName as keyof typeof inventoryItemsInfo, inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].cost)\r\n\r\n                                }}\r\n                            >\r\n                                <img className={s.store__purchase_itemsList_btn_img} alt={itemName}\r\n                                    src={inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].img}\r\n                                />\r\n                                <div className={s.store__purchase_itemsList_btn_cost}>\r\n                                    <p className={s.store__purchase_itemsList_btn_cost_count}>\r\n                                        {inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].cost}\r\n                                    </p>\r\n                                    <img src={props.currencyImg} className={s.store__purchase_itemsList_btn_cost_currency} alt='currency on this location' /> {/*current currency*/}\r\n                                </div>\r\n                            </button>\r\n                        )\r\n                    }\r\n                </div>\r\n                <p className={s.store__purchase_text}>\r\n                    {focusItem ?\r\n                        (focusItem !== 'noMoneyForBuy' ?\r\n                            inventoryItemsInfo[focusItem].description === '' ? <br />\r\n                                : inventoryItemsInfo[focusItem].description\r\n                            : 'No coins...'\r\n                        )\r\n                        : '⇡ Click to buy ⇡'\r\n                    }\r\n                </p>\r\n            </div>\r\n            <div className={s.store__inventory}>\r\n                <p className={s.store__inventory_title}>\r\n                    Your inventory:\r\n                </p>\r\n                <div className={s.store__inventory_itemsList}>\r\n                    {props.inventory.length === 0 ? <p>It's empty here...</p> :\r\n                        props.inventory.map(item =>\r\n                            <div key={item.name} className={s.store__inventory_itemsList_item}>\r\n                                <img className={s.store__inventory_itemsList_item_img} alt={item.name}\r\n                                    src={inventoryItemsInfo[item.name].img} />\r\n                                <p className={s.store__inventory_itemsList_item_count}>{item.count}</p>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            </div>\r\n            <button className={s.store__leaveBtn} onClick={() => closeLocationMapWindow()}>\r\n                Leave store\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Store;","import { AppStateType } from \"@redux/store\";\r\nimport { InventoryItemName } from \"commonTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport Store from \"./store\";\r\nimport { buyInventoryItem } from '@redux/playerReducer'\r\n\r\ntype StoreOwnProps = {\r\n    closeLocationMapWindow: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: StoreOwnProps) => ({\r\n    currencyImg: state.location.currencyImg,\r\n    inventory: state.player.inventory,\r\n    coins: state.player.coins,\r\n    closeLocationMapWindow: ownProps.closeLocationMapWindow,\r\n})\r\n\r\ntype DispatchPropsType = {\r\n    buyInventoryItem: (itemName: InventoryItemName, cost: number) => void\r\n}\r\n\r\nexport type StoreProps = ReturnType<typeof mapStateToProps> & DispatchPropsType\r\n\r\nexport default connect(mapStateToProps, { buyInventoryItem })(Store)","import RenderImg from 'components/renderImg'\r\nimport { useEffect, useState } from 'react'\r\nimport Inn from './inn/innContainer'\r\nimport s from './locationMap.module.scss'\r\nimport { LocationMapProps } from './locationMapContainer'\r\nimport Store from './store/storeContainer'\r\n\r\nconst LocationMap: React.FC<LocationMapProps> = (props) => {\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, 0)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    const [focusItem, setFocusItem] = useState<'inn' | 'store' | 'boss' | 'lair' | null>(null)\r\n    const [displayingWindow, setDisplayingWindow] = useState<'Inn' | 'Store' | null>(null)\r\n    const closeLocationMapWindow = () => setDisplayingWindow(null)\r\n    return (\r\n        <div className={`${s.locationMapScreen}`}>\r\n            <div className={`${s.locationMap} ${displayingWindow ? s.nowItsBackground : null}`}>\r\n                <RenderImg src={props.mapBackgroundImg} alt=\"background\" className={s.locationMap__backgroundImg} />\r\n                <div className={s.locationMap__onFocusInfo}>\r\n                    <p>\r\n                        {focusItem === null ? 'Where am I going?' : ('Go to the ' + focusItem)}\r\n                    </p>\r\n                </div>\r\n                <div className={s.locationMap__buttonList}>\r\n                    <button className={`${s.locationMap__buttonList_innBtn} ${props.locationName && s[props.locationName]}`}\r\n                        onMouseOver={() => setFocusItem('inn')}\r\n                        onMouseLeave={() => displayingWindow === null && setFocusItem(null)}\r\n                        onClick={() => setDisplayingWindow('Inn')}>\r\n                        <RenderImg src={props.innIcon} alt=\"Inn\" className={s.locationMap__buttonList_innBtn_icon} />\r\n                    </button>\r\n                    <button className={s.locationMap__buttonList_storeBtn} \r\n                        onMouseOver={() => setFocusItem('store')}\r\n                        onMouseLeave={() => displayingWindow === null && setFocusItem(null)}\r\n                        onClick={() => setDisplayingWindow('Store')}>\r\n                        <RenderImg src={props.storeIcon} alt=\"Store\" className={s.locationMap__buttonList_storeBtn_icon} />\r\n                    </button>\r\n                    <button className={s.locationMap__buttonList_bossBtn}\r\n                        onMouseOver={() => setFocusItem('boss')}\r\n                        onMouseLeave={() => props.sceneOpacity === 1 && setFocusItem(null)}\r\n                        onClick={() => {\r\n                            if (props.mainBossName) {\r\n                                props.changeDownloadQuantity('PLUS_ONE')\r\n                                props.setNewEnemy(props.mainBossName)\r\n                                props.setSceneWithTransition('Arena')\r\n                            }\r\n                            else console.warn('no bossName found')\r\n                        }}>\r\n                        <RenderImg src={props.toBossIcon} alt='to boss' className={s.locationMap__buttonList_bossBtn_icon} />\r\n                    </button>\r\n                    <button className={`${s.locationMap__buttonList_lairBtn} ${props.locationName && s[props.locationName]}`}\r\n                        disabled={props.livingMonsterNames.length === 0}\r\n                        onMouseOver={() => setFocusItem('lair')}\r\n                        onMouseLeave={() => props.sceneOpacity === 1 && setFocusItem(null)}\r\n                        onClick={() => {\r\n                            if (props.livingMonsterNames) {\r\n                                props.changeDownloadQuantity('PLUS_ONE')\r\n                                props.setNewEnemy(props.livingMonsterNames[0])\r\n                                props.setSceneWithTransition('Arena')\r\n                            }\r\n                            else console.warn('no monsterNames found')\r\n                        }}>\r\n                        <RenderImg src={props.lairIcon} alt=\"Lair\" className={s.locationMap__buttonList_lairBtn_icon} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {displayingWindow === 'Inn' ? <Inn closeLocationMapWindow={closeLocationMapWindow} /> :\r\n                (\r\n                    displayingWindow === 'Store' ? <Store closeLocationMapWindow={closeLocationMapWindow} /> : null\r\n                )\r\n            }\r\n            {displayingWindow !== null ?\r\n                <div className={s.coins}>\r\n                    <p className={s.coins_text}>Coins: {props.coins}</p>\r\n                    <img src={props.currencyImg} className={s.coins_img} alt=\"'currency on this location'\" />\r\n                </div>\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationMap","import { connect } from \"react-redux\";\r\nimport { SceneName } from \"scenes\";\r\nimport LocationMap from \"./locationMap\";\r\nimport { setSceneWithTransition, setCurrentSceneDidMount } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\";\r\nimport { setNewEnemy } from \"@redux/enemyReducer\";\r\nimport { EnemyName } from \"@base/enemies\";\r\nimport { changeDownloadQuantity } from \"@redux/sceneReducer\";\r\n\r\nexport type LocationMapProps = DispatchPropsType & StatePropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    locationName: state.location.locationName,\r\n    mapBackgroundImg: state.location.mapBackgroundImg,\r\n    fightBackgroundImg: state.location.fightBackgroundImg,\r\n    lairIcon: state.location.locationEnvironment.lairIcon,\r\n    innIcon: state.location.locationEnvironment.innIcon,\r\n    storeIcon: state.location.locationEnvironment.storeIcon,\r\n    toBossIcon: state.location.locationEnvironment.toBossIcon,\r\n    livingMonsterNames: state.location.livingMonsterNames,\r\n    mainBossName: state.location.mainBossName,\r\n    coins: state.player.coins,\r\n    currencyImg: state.location.currencyImg,\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n\r\n    sceneOpacity: state.scene.opacity,\r\n})\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n    setNewEnemy: (enemyName: EnemyName) => void\r\n    changeDownloadQuantity: (action: 'PLUS_ONE' | 'MINUS_ONE') => void\r\n}\r\n\r\nexport default connect(mapStateToProps, { setSceneWithTransition, setNewEnemy, changeDownloadQuantity, setCurrentSceneDidMount })(LocationMap)","import { connect } from \"react-redux\"\r\nimport { changeUnloadedImagesQuantity } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\ntype RenderImgOwnProps = {\r\n    src: string | undefined\r\n    alt?: string\r\n    className?: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: RenderImgOwnProps) => ({\r\n    src: ownProps.src,\r\n    alt: ownProps.alt,\r\n    className: ownProps.className\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    changeUnloadedImagesQuantity: (action: \"PLUS_ONE\" | \"MINUS_ONE\") => void\r\n}\r\n\r\ntype RenderImgProps = ReturnType<typeof mapStateToProps> & MapDispatchToProps\r\n\r\nconst RenderImg: React.FC<RenderImgProps> = ({ src, alt = 'img', className = undefined, changeUnloadedImagesQuantity }) => {\r\n\r\n    useEffect(() => {\r\n        changeUnloadedImagesQuantity(\"PLUS_ONE\")\r\n    }, [])\r\n\r\n    return (\r\n        <img src={src} alt={alt} className={className} onLoad={() => changeUnloadedImagesQuantity(\"MINUS_ONE\")} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { changeUnloadedImagesQuantity })(RenderImg)"],"names":["inventoryItemsInfo","img","healingPotionImg","description","settings","cost","freezingPotionImg","poisonPotionImg","setPlayerHealthPoints","closeLocationMapWindow","props","disableYesBtn","coins","playerHealthPoints","className","s","style","width","transition","src","currencyImg","alt","onClick","disabled","connect","state","ownProps","player","healthPoints","location","Inn","buyInventoryItem","useState","focusItem","setFocusItem","Object","keys","map","itemName","onMouseOver","onMouseLeave","inventory","length","item","name","count","Store","useEffect","unloadedImagesQuantity","currentSceneDidMount","setTimeout","setCurrentSceneDidMount","displayingWindow","setDisplayingWindow","mapBackgroundImg","locationName","innIcon","storeIcon","sceneOpacity","mainBossName","changeDownloadQuantity","setNewEnemy","setSceneWithTransition","console","warn","toBossIcon","livingMonsterNames","lairIcon","fightBackgroundImg","locationEnvironment","scene","opacity","LocationMap","changeUnloadedImagesQuantity","undefined","onLoad"],"sourceRoot":""}