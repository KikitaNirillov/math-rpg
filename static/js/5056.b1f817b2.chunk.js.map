{"version":3,"file":"static/js/5056.b1f817b2.chunk.js","mappings":"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","sources":["common/inventoryItemsInfo.ts","webpack://rpg/./src/components/main/locationMap/inn/inn.module.scss?8fdd","components/main/locationMap/inn/inn.tsx","components/main/locationMap/inn/innContainer.tsx","webpack://rpg/./src/components/main/locationMap/locationMap.module.scss?7a76","webpack://rpg/./src/components/main/locationMap/store/store.module.scss?563c","components/main/locationMap/store/store.tsx","components/main/locationMap/store/storeContainer.tsx","components/main/locationMap/locationMap.tsx","components/main/locationMap/locationMapContainer.tsx","components/renderImg.tsx"],"sourcesContent":["import { InventoryItemName } from \"commonTypes\";\r\nimport healingPotionImg from \"assets/imgs/potions/healingPotionImg.png\"\r\nimport freezingPotionImg from \"assets/imgs/potions/freezingPotionImg.png\"\r\nimport poisonPotionImg from \"assets/imgs/potions/poisonPotionImg.png\"\r\nimport settings from \"settings\";\r\n\r\ntype ItemInfo = {\r\n    img: string\r\n    description: string\r\n    cost: number\r\n}\r\nexport const inventoryItemsInfo: Record<InventoryItemName, ItemInfo> = {\r\n    'Healing potion': {\r\n        img: healingPotionImg,\r\n        description: `Restore ${settings.addedHealthPointsByHealthPotion} health points`,\r\n        cost: 2,\r\n    },\r\n    'Freezing potion': {\r\n        img: freezingPotionImg,\r\n        description: `Freeze the enemy for ${settings.durationOfFreezing} him moves`,\r\n        cost: 4,\r\n    },\r\n    'Poison potion': {\r\n        img: poisonPotionImg,\r\n        description: `Add ${settings.additionalDamageByPoison} damage for ${settings.durationOfPoison} your moves`,\r\n        cost: 5,\r\n    },\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"inn\":\"inn_inn__mD0FL\",\"inn__healthInfo\":\"inn_inn__healthInfo__WhdCW\",\"inn__healthInfo_bar\":\"inn_inn__healthInfo_bar__2pYVZ\",\"inn__healthInfo_bar_stripe\":\"inn_inn__healthInfo_bar_stripe__zDhW9\",\"inn__healthInfo_bar_points\":\"inn_inn__healthInfo_bar_points__A1aNz\",\"inn__title\":\"inn_inn__title__o39vB\",\"inn__title_img\":\"inn_inn__title_img__mz7vU\",\"inn__buttonList\":\"inn_inn__buttonList__0WG53\",\"inn__buttonList_button\":\"inn_inn__buttonList_button__NSUr5\"};","import settings from 'settings'\r\nimport s from './inn.module.scss'\r\nimport { InnProps } from './innContainer'\r\n\r\nconst Inn: React.FC<InnProps> = ({ buyFullHeal, closeLocationMapWindow, ...props }) => {\r\n    const disableYesBtn = props.coins < settings.pricePerInn || props.playerHealthPoints === 100\r\n    return (\r\n        <div className={`${s.inn} locationMapWindow`}>\r\n            <div className={s.inn__healthInfo}>\r\n                <p className={s.inn__healthInfo_title}>Your health:</p>\r\n                <div className={s.inn__healthInfo_bar}>\r\n                    <div className={s.inn__healthInfo_bar_stripe} style={{ width: `${props.playerHealthPoints}%`, transition: `all ${settings.changingHealthPointsTransition}ms` }} />\r\n                    <p className={s.inn__healthInfo_bar_points}>{props.playerHealthPoints}</p>\r\n                </div>\r\n            </div>\r\n            <div className={s.inn__title}>\r\n                <p className={s.inn__title_text}>Do you want restore your healt by 3</p>\r\n                <img src={props.currencyImg || ''} alt=\"currency\" className={s.inn__title_img} />\r\n                <p className={s.inn__title_text}>?</p>\r\n            </div>\r\n            <div className={s.inn__buttonList}>\r\n                <button className={s.inn__buttonList_button} onClick={() => buyFullHeal()} disabled={disableYesBtn}>\r\n                    Yes\r\n                </button>\r\n                <button className={s.inn__buttonList_button} onClick={() => closeLocationMapWindow()}>\r\n                    No\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inn","import { AppStateType } from \"@redux/store\";\r\nimport { connect } from \"react-redux\";\r\nimport Inn from \"./inn\";\r\nimport { buyFullHeal } from \"@redux/playerReducer\";\r\n\r\ntype InnOwnProps = {\r\n    closeLocationMapWindow: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: InnOwnProps) => ({\r\n    playerHealthPoints: state.player.healthPoints,\r\n    currencyImg: state.location.currencyImg,\r\n    coins: state.player.coins,\r\n    closeLocationMapWindow: ownProps.closeLocationMapWindow,\r\n})\r\n\r\ntype DispatchPropsType = {\r\n    buyFullHeal: () => void\r\n}\r\n\r\nexport type InnProps = ReturnType<typeof mapStateToProps> & DispatchPropsType\r\n\r\nexport default connect(mapStateToProps, { buyFullHeal })(Inn)","// extracted by mini-css-extract-plugin\nexport default {\"locationMapScreen\":\"locationMap_locationMapScreen__PXsJn\",\"coins\":\"locationMap_coins__C7xm9\",\"coins_img\":\"locationMap_coins_img__9bWiR\",\"nowItsBackground\":\"locationMap_nowItsBackground__yq9JE\",\"locationMap\":\"locationMap_locationMap__zypAZ\",\"locationMap__backgroundImg\":\"locationMap_locationMap__backgroundImg__nk11y\",\"locationMap__onFocusInfo\":\"locationMap_locationMap__onFocusInfo__L0FHS\",\"locationMap__buttonList\":\"locationMap_locationMap__buttonList__caFXY\",\"locationMap__buttonList_innBtn\":\"locationMap_locationMap__buttonList_innBtn__WRs9W\",\"locationMap__buttonList_innBtn_icon\":\"locationMap_locationMap__buttonList_innBtn_icon__4AUKl\",\"location3\":\"locationMap_location3__fRYzp\",\"locationMap__buttonList_storeBtn\":\"locationMap_locationMap__buttonList_storeBtn__sS-O7\",\"locationMap__buttonList_storeBtn_icon\":\"locationMap_locationMap__buttonList_storeBtn_icon__nxgCs\",\"locationMap__buttonList_bossBtn\":\"locationMap_locationMap__buttonList_bossBtn__8aUlE\",\"locationMap__buttonList_bossBtn_icon\":\"locationMap_locationMap__buttonList_bossBtn_icon__sRcwp\",\"locationMap__buttonList_lairBtn\":\"locationMap_locationMap__buttonList_lairBtn__o+-vH\",\"locationMap__buttonList_lairBtn_icon\":\"locationMap_locationMap__buttonList_lairBtn_icon__JimZ7\",\"location1\":\"locationMap_location1__BuIOd\"};","// extracted by mini-css-extract-plugin\nexport default {\"store\":\"store_store__5Xnkg\",\"store__purchase\":\"store_store__purchase__NiqQI\",\"store__purchase_itemsList\":\"store_store__purchase_itemsList__eqAUx\",\"store__purchase_itemsList_btn\":\"store_store__purchase_itemsList_btn__50pwE\",\"store__purchase_itemsList_btn_img\":\"store_store__purchase_itemsList_btn_img__DkST9\",\"store__purchase_itemsList_btn_cost\":\"store_store__purchase_itemsList_btn_cost__djLIL\",\"store__purchase_itemsList_btn_cost_count\":\"store_store__purchase_itemsList_btn_cost_count__o4YXH\",\"store__purchase_itemsList_btn_cost_currency\":\"store_store__purchase_itemsList_btn_cost_currency__LMbby\",\"store__inventory\":\"store_store__inventory__8ogWE\",\"store__inventory_itemsList\":\"store_store__inventory_itemsList__QfKc2\",\"store__inventory_itemsList_item\":\"store_store__inventory_itemsList_item__w-evJ\",\"store__inventory_itemsList_item_img\":\"store_store__inventory_itemsList_item_img__jJjyC\",\"store__inventory_itemsList_item_count\":\"store_store__inventory_itemsList_item_count__pwnWq\",\"store__leaveBtn\":\"store_store__leaveBtn__72Ei4\"};","import { inventoryItemsInfo } from 'common/inventoryItemsInfo';\r\nimport { InventoryItemName } from 'commonTypes';\r\nimport { useState } from 'react';\r\nimport s from './store.module.scss'\r\nimport { StoreProps } from './storeContainer';\r\n\r\nconst Store: React.FC<StoreProps> = ({ closeLocationMapWindow, buyInventoryItem, ...props }) => {\r\n    const [focusItem, setFocusItem] = useState<null | InventoryItemName | 'noMoneyForBuy'>(null)\r\n    return (\r\n        <div className={`${s.store} locationMapWindow`}>\r\n            <p>Store:</p>\r\n            <div className={s.store__purchase}>\r\n                <div className={s.store__purchase_itemsList}>\r\n                    {\r\n                        Object.keys(inventoryItemsInfo).map(itemName =>\r\n                            <button key={itemName}\r\n                                className={s.store__purchase_itemsList_btn}\r\n                                onMouseOver={() => setFocusItem(itemName as keyof typeof inventoryItemsInfo)}\r\n                                onMouseLeave={() => setFocusItem(null)}\r\n                                onClick={() => {\r\n                                    if (props.coins < inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].cost)\r\n                                        setFocusItem('noMoneyForBuy')\r\n                                    else buyInventoryItem(itemName as keyof typeof inventoryItemsInfo, inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].cost)\r\n\r\n                                }}\r\n                            >\r\n                                <img className={s.store__purchase_itemsList_btn_img} alt={itemName}\r\n                                    src={inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].img}\r\n                                />\r\n                                <div className={s.store__purchase_itemsList_btn_cost}>\r\n                                    <p className={s.store__purchase_itemsList_btn_cost_count}>\r\n                                        {inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].cost}\r\n                                    </p>\r\n                                    <img src={props.currencyImg} className={s.store__purchase_itemsList_btn_cost_currency} alt='currency on this location' /> {/*current currency*/}\r\n                                </div>\r\n                            </button>\r\n                        )\r\n                    }\r\n                </div>\r\n                <p className={s.store__purchase_text}>\r\n                    {focusItem ?\r\n                        (focusItem !== 'noMoneyForBuy' ?\r\n                            inventoryItemsInfo[focusItem].description === '' ? <br />\r\n                                : inventoryItemsInfo[focusItem].description\r\n                            : 'No coins...'\r\n                        )\r\n                        : '⇡ Click to buy ⇡'\r\n                    }\r\n                </p>\r\n            </div>\r\n            <div className={s.store__inventory}>\r\n                <p className={s.store__inventory_title}>\r\n                    Your inventory:\r\n                </p>\r\n                <div className={s.store__inventory_itemsList}>\r\n                    {props.inventory.length === 0 ? <p>It's empty here...</p> :\r\n                        props.inventory.map(item =>\r\n                            <div key={item.name} className={s.store__inventory_itemsList_item}>\r\n                                <img className={s.store__inventory_itemsList_item_img} alt={item.name}\r\n                                    src={inventoryItemsInfo[item.name].img} />\r\n                                <p className={s.store__inventory_itemsList_item_count}>{item.count}</p>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            </div>\r\n            <button className={s.store__leaveBtn} onClick={() => closeLocationMapWindow()}>\r\n                Leave store\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Store;","import { AppStateType } from \"@redux/store\";\r\nimport { InventoryItemName } from \"commonTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport Store from \"./store\";\r\nimport { buyInventoryItem } from '@redux/playerReducer'\r\n\r\ntype StoreOwnProps = {\r\n    closeLocationMapWindow: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: StoreOwnProps) => ({\r\n    currencyImg: state.location.currencyImg,\r\n    inventory: state.player.inventory,\r\n    coins: state.player.coins,\r\n    closeLocationMapWindow: ownProps.closeLocationMapWindow,\r\n})\r\n\r\ntype DispatchPropsType = {\r\n    buyInventoryItem: (itemName: InventoryItemName, cost: number) => void\r\n}\r\n\r\nexport type StoreProps = ReturnType<typeof mapStateToProps> & DispatchPropsType\r\n\r\nexport default connect(mapStateToProps, { buyInventoryItem })(Store)","import RenderImg from 'components/renderImg'\r\nimport { useEffect, useState } from 'react'\r\nimport Inn from './inn/innContainer'\r\nimport s from './locationMap.module.scss'\r\nimport { LocationMapProps } from './locationMapContainer'\r\nimport Store from './store/storeContainer'\r\n\r\nconst LocationMap: React.FC<LocationMapProps> = (props) => {\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, 0)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    const [focusItem, setFocusItem] = useState<'inn' | 'store' | 'boss' | 'lair' | null>(null)\r\n    const [displayingWindow, setDisplayingWindow] = useState<'Inn' | 'Store' | null>(null)\r\n    const closeLocationMapWindow = () => setDisplayingWindow(null)\r\n    return (\r\n        <div className={`${s.locationMapScreen}`}>\r\n            <div className={`${s.locationMap} ${displayingWindow ? s.nowItsBackground : null}`}>\r\n                <RenderImg src={props.mapBackgroundImg} alt=\"background\" className={s.locationMap__backgroundImg} />\r\n                <div className={s.locationMap__onFocusInfo}>\r\n                    <p>\r\n                        {focusItem === null ? 'Where am I going?' : (\r\n                            (focusItem==='lair' && props.livingMonsterNames.length === 0) ? 'The lair is completely cleared' : ('Go to the ' + focusItem))}\r\n                    </p>\r\n                </div>\r\n                <div className={s.locationMap__buttonList}>\r\n                    <button className={`${s.locationMap__buttonList_innBtn} ${props.locationName && s[props.locationName]}`}\r\n                        onMouseOver={() => setFocusItem('inn')}\r\n                        onMouseLeave={() => displayingWindow === null && setFocusItem(null)}\r\n                        onClick={() => setDisplayingWindow('Inn')}>\r\n                        <RenderImg src={props.innIcon} alt=\"Inn\" className={s.locationMap__buttonList_innBtn_icon} />\r\n                    </button>\r\n                    <button className={s.locationMap__buttonList_storeBtn} \r\n                        onMouseOver={() => setFocusItem('store')}\r\n                        onMouseLeave={() => displayingWindow === null && setFocusItem(null)}\r\n                        onClick={() => setDisplayingWindow('Store')}>\r\n                        <RenderImg src={props.storeIcon} alt=\"Store\" className={s.locationMap__buttonList_storeBtn_icon} />\r\n                    </button>\r\n                    <button className={s.locationMap__buttonList_bossBtn}\r\n                        onMouseOver={() => setFocusItem('boss')}\r\n                        onMouseLeave={() => props.sceneOpacity === 1 && setFocusItem(null)}\r\n                        onClick={() => {\r\n                            if (props.mainBossName) {\r\n                                props.changeDownloadQuantity('PLUS_ONE')\r\n                                props.setNewEnemy(props.mainBossName)\r\n                                props.setSceneWithTransition('Arena')\r\n                            }\r\n                            else console.warn('no bossName found')\r\n                        }}>\r\n                        <RenderImg src={props.toBossIcon} alt='to boss' className={s.locationMap__buttonList_bossBtn_icon} />\r\n                    </button>\r\n                    <button className={`${s.locationMap__buttonList_lairBtn} ${props.locationName && s[props.locationName]}`}\r\n                        onMouseOver={() => setFocusItem('lair')}\r\n                        onMouseLeave={() => props.sceneOpacity === 1 && setFocusItem(null)}\r\n                        onClick={() => {\r\n                            if (props.livingMonsterNames.length !== 0) {\r\n                                props.changeDownloadQuantity('PLUS_ONE')\r\n                                props.setNewEnemy(props.livingMonsterNames[0])\r\n                                props.setSceneWithTransition('Arena')\r\n                            }\r\n                            else console.warn('no monsterNames found')\r\n                        }}>\r\n                        <RenderImg src={props.lairIcon} alt=\"Lair\" className={s.locationMap__buttonList_lairBtn_icon} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {displayingWindow === 'Inn' ? <Inn closeLocationMapWindow={closeLocationMapWindow} /> :\r\n                (\r\n                    displayingWindow === 'Store' ? <Store closeLocationMapWindow={closeLocationMapWindow} /> : null\r\n                )\r\n            }\r\n            {displayingWindow !== null ?\r\n                <div className={s.coins}>\r\n                    <p className={s.coins_text}>Coins: {props.coins}</p>\r\n                    <img src={props.currencyImg} className={s.coins_img} alt=\"'currency on this location'\" />\r\n                </div>\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationMap","import { connect } from \"react-redux\";\r\nimport { SceneName } from \"scenes\";\r\nimport LocationMap from \"./locationMap\";\r\nimport { setSceneWithTransition, setCurrentSceneDidMount } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\";\r\nimport { setNewEnemy } from \"@redux/enemyReducer\";\r\nimport { EnemyName } from \"@base/enemies\";\r\nimport { changeDownloadQuantity } from \"@redux/sceneReducer\";\r\n\r\nexport type LocationMapProps = DispatchPropsType & StatePropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    locationName: state.location.locationName,\r\n    mapBackgroundImg: state.location.mapBackgroundImg,\r\n    fightBackgroundImg: state.location.fightBackgroundImg,\r\n    lairIcon: state.location.locationEnvironment.lairIcon,\r\n    innIcon: state.location.locationEnvironment.innIcon,\r\n    storeIcon: state.location.locationEnvironment.storeIcon,\r\n    toBossIcon: state.location.locationEnvironment.toBossIcon,\r\n    livingMonsterNames: state.location.livingMonsterNames,\r\n    mainBossName: state.location.mainBossName,\r\n    coins: state.player.coins,\r\n    currencyImg: state.location.currencyImg,\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n\r\n    sceneOpacity: state.scene.opacity,\r\n})\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n    setNewEnemy: (enemyName: EnemyName) => void\r\n    changeDownloadQuantity: (action: 'PLUS_ONE' | 'MINUS_ONE') => void\r\n}\r\n\r\nexport default connect(mapStateToProps, { setSceneWithTransition, setNewEnemy, changeDownloadQuantity, setCurrentSceneDidMount })(LocationMap)","import { connect } from \"react-redux\"\r\nimport { changeUnloadedImagesQuantity } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\ntype RenderImgOwnProps = {\r\n    src: string | undefined\r\n    alt?: string\r\n    className?: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: RenderImgOwnProps) => ({\r\n    src: ownProps.src,\r\n    alt: ownProps.alt,\r\n    className: ownProps.className\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    changeUnloadedImagesQuantity: (action: \"PLUS_ONE\" | \"MINUS_ONE\") => void\r\n}\r\n\r\ntype RenderImgProps = ReturnType<typeof mapStateToProps> & MapDispatchToProps\r\n\r\nconst RenderImg: React.FC<RenderImgProps> = ({ src, alt = 'img', className = undefined, changeUnloadedImagesQuantity }) => {\r\n\r\n    useEffect(() => {\r\n        changeUnloadedImagesQuantity(\"PLUS_ONE\")\r\n    }, [])\r\n\r\n    return (\r\n        <img src={src} alt={alt} className={className} onLoad={() => changeUnloadedImagesQuantity(\"MINUS_ONE\")} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { changeUnloadedImagesQuantity })(RenderImg)"],"names":["inventoryItemsInfo","img","healingPotionImg","description","concat","settings","cost","freezingPotionImg","poisonPotionImg","_ref","buyFullHeal","closeLocationMapWindow","props","_objectWithoutProperties","_excluded","disableYesBtn","coins","playerHealthPoints","_jsxs","className","s","children","_jsx","style","width","transition","src","currencyImg","alt","onClick","disabled","connect","state","ownProps","player","healthPoints","location","Inn","buyInventoryItem","_useState","useState","_useState2","_slicedToArray","focusItem","setFocusItem","Object","keys","map","itemName","onMouseOver","onMouseLeave","inventory","length","item","name","count","Store","useEffect","unloadedImagesQuantity","currentSceneDidMount","setTimeout","setCurrentSceneDidMount","_useState3","_useState4","displayingWindow","setDisplayingWindow","RenderImg","mapBackgroundImg","livingMonsterNames","locationName","innIcon","storeIcon","sceneOpacity","mainBossName","changeDownloadQuantity","setNewEnemy","setSceneWithTransition","console","warn","toBossIcon","lairIcon","fightBackgroundImg","locationEnvironment","scene","opacity","LocationMap","changeUnloadedImagesQuantity","_ref$alt","_ref$className","undefined","onLoad"],"sourceRoot":""}