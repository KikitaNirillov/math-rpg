{"version":3,"file":"static/js/7154.5a2d7a88.chunk.js","mappings":"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","sources":["common/inventoryItemsInfo.ts","webpack://rpg/./src/components/main/arena/arena.module.scss?1394","webpack://rpg/./src/components/main/arena/defaultInterface/defaultInterface.module.scss?0edc","components/main/arena/defaultInterface/defaultInterface.tsx","webpack://rpg/./src/components/main/arena/equationInterface/equationInterface.module.scss?0525","components/main/arena/equationInterface/equationInterface.tsx","webpack://rpg/./src/components/main/arena/questionInterface/questionInterface.module.scss?fcac","components/main/arena/questionInterface/questionInterface.tsx","webpack://rpg/./src/components/main/arena/inventoryInterface/inventoryInterface.module.scss?8bfa","components/main/arena/inventoryInterface/inventoryInterface.tsx","components/main/arena/arena.tsx","components/main/arena/arenaContainer.tsx","components/typeWriter/typeWriter.tsx","components/typeWriter/typeWriterTransparentBtn.tsx"],"sourcesContent":["import { InventoryItemName } from \"commonTypes\";\r\nimport healingPotionImg from \"assets/imgs/potions/healingPotionImg.jpg\"\r\nimport freezingPotionImg from \"assets/imgs/potions/freezingPotionImg.jpg\"\r\nimport poisonPotionImg from \"assets/imgs/potions/poisonPotionImg.jpg\"\r\nimport { addedHealthPointsByHealthPotion, additionalDamageByPoison, durationOfFreezing, durationOfPoison } from \"settings\";\r\n\r\ntype ItemInfo = {\r\n    img: string\r\n    description: string\r\n    cost: number\r\n}\r\nexport const inventoryItemsInfo: Record<InventoryItemName, ItemInfo> = {\r\n    'Healing potion': {\r\n        img: healingPotionImg,\r\n        description: `Restore ${addedHealthPointsByHealthPotion} health points`,\r\n        cost: 2,\r\n    },\r\n    'Freezing potion': {\r\n        img: freezingPotionImg,\r\n        description: `Freeze the enemy for ${durationOfFreezing} him moves`,\r\n        cost: 4,\r\n    },\r\n    'Poison potion': {\r\n        img: poisonPotionImg,\r\n        description: `Add ${additionalDamageByPoison} damage for ${durationOfPoison} your moves`,\r\n        cost: 5,\r\n    },\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"arena\":\"arena_arena__jfM5x\",\"arena__scene\":\"arena_arena__scene__OuN1A\",\"arena__scene_healthBars\":\"arena_arena__scene_healthBars__bz-L9\",\"attacker\":\"arena_attacker__Ye2dT\",\"arena__scene_healthBars_container\":\"arena_arena__scene_healthBars_container__9ngPV\",\"arena__scene_healthBars_container_health\":\"arena_arena__scene_healthBars_container_health__OjqHE\",\"arena__scene_healthBars_container_name\":\"arena_arena__scene_healthBars_container_name__P-A8r\",\"arena__scene_figthers\":\"arena_arena__scene_figthers__zQfmt\",\"arena__scene_figthers_fighter\":\"arena_arena__scene_figthers_fighter__CD+Za\",\"arena__scene_figthers_fighter_relativeContainer\":\"arena_arena__scene_figthers_fighter_relativeContainer__lPlQ+\",\"arena__scene_figthers_fighter_relativeContainer_img\":\"arena_arena__scene_figthers_fighter_relativeContainer_img__Sqv+8\",\"arena__interface\":\"arena_arena__interface__eNWgA\"};","// extracted by mini-css-extract-plugin\nexport default {\"defaultInterface\":\"defaultInterface_defaultInterface__Cjuko\",\"defaultInterface__buttons\":\"defaultInterface_defaultInterface__buttons__WaSOe\",\"defaultInterface__buttons_button\":\"defaultInterface_defaultInterface__buttons_button__PoX1n\",\"defaultInterface__textField\":\"defaultInterface_defaultInterface__textField__Hm6BW\",\"defaultInterface__textField_fightInfo\":\"defaultInterface_defaultInterface__textField_fightInfo__pNuCy\"};","import { EnemyQuestion } from '@redux/enemyReducer'\r\nimport { FightInterfaceName } from '@redux/fightReducer'\r\nimport s from './defaultInterface.module.scss'\r\n\r\ntype DefaultInterfaceProps = {\r\n    attack: () => void\r\n    escape: () => void\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    playerIsAttacker: boolean\r\n    fightInfo: string\r\n}\r\n\r\nconst DefaultInterface: React.FC<DefaultInterfaceProps> = ({ attack, escape, setDisplayingFightInterface,...props }) => {\r\n    return (\r\n        <div className={`${s.defaultInterface} arenaInterfaceContainer`}>\r\n            <div className={s.defaultInterface__buttons}>\r\n                <button\r\n                    className={s.defaultInterface__buttons_button}\r\n                    onClick={attack}\r\n                    disabled={!props.playerIsAttacker}\r\n                >\r\n                    <p>Attack</p>\r\n                </button>\r\n                <button\r\n                    className={s.defaultInterface__buttons_button}\r\n                    onClick={() => setDisplayingFightInterface('inventoryInterface')}\r\n                    disabled={!props.playerIsAttacker}\r\n                >\r\n                    <p>Inventory</p>\r\n                </button>\r\n                <button\r\n                    className={s.defaultInterface__buttons_button}\r\n                    onClick={() => setDisplayingFightInterface('questionInterface')}\r\n                    disabled={!props.playerIsAttacker}\r\n                >\r\n                    <p>Talk</p>\r\n                </button>\r\n                <button\r\n                    className={s.defaultInterface__buttons_button}\r\n                    onClick={escape}\r\n                    disabled={!props.playerIsAttacker}\r\n                >\r\n                    <p>Escape</p>\r\n                </button>\r\n            </div>\r\n            <div className={s.defaultInterface__textField}>\r\n                <div className={s.defaultInterface__textField_fightInfo}>\r\n                    <p className={s.defaultInterface__textField_fightInfo_main}>\r\n                        {props.fightInfo}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DefaultInterface","// extracted by mini-css-extract-plugin\nexport default {\"equationInterface\":\"equationInterface_equationInterface__BVhSx\",\"equationInterface__equation\":\"equationInterface_equationInterface__equation__bxIr+\",\"equationInterface__equation_symbol\":\"equationInterface_equationInterface__equation_symbol__oDMmg\",\"equationInterface__equation_items\":\"equationInterface_equationInterface__equation_items__JlnCT\",\"equationInterface__answerForm\":\"equationInterface_equationInterface__answerForm__smeME\",\"equationInterface__answerForm_timer\":\"equationInterface_equationInterface__answerForm_timer__ST-7j\",\"equationInterface__answerForm_timer_title\":\"equationInterface_equationInterface__answerForm_timer_title__YHLI+\",\"equationInterface__answerForm_answers\":\"equationInterface_equationInterface__answerForm_answers__e2Z91\",\"equationInterface__answerForm_answers_fieldContainer\":\"equationInterface_equationInterface__answerForm_answers_fieldContainer__xMJYf\",\"equationInterface__answerForm_answers_fieldContainer_field\":\"equationInterface_equationInterface__answerForm_answers_fieldContainer_field__cefuu\",\"equationInterface__answerForm_btn\":\"equationInterface_equationInterface__answerForm_btn__ukGD1\"};","import s from './equationInterface.module.scss'\r\nimport { Formik, Form, Field, FormikProps } from 'formik';\r\nimport { EnteredEquationAnswer } from '@redux/fightReducer';\r\nimport systemSymbol from 'assets/imgs/System Symbol.png';\r\n\r\nconst CustomField: React.FC<{ formik: FormikProps<MyFormValues>, name: 'x' | 'y', autoFocus?: boolean }> = ({ formik, name, autoFocus = false }) => {\r\n    const placeholder = name.toUpperCase() + \" value(s)\"\r\n    return (\r\n        <div className={s.equationInterface__answerForm_answers_fieldContainer}>\r\n            <Field className={s.equationInterface__answerForm_answers_fieldContainer_field}\r\n                name={name} autoFocus={autoFocus} autoComplete=\"off\" placeholder={placeholder}\r\n                onChange={(e: any) => {\r\n                    const value = e.currentTarget.value;\r\n                    const regex = /^[0-9-,.]*$/;\r\n                    if (regex.test(value.toString())) {\r\n                        formik.setFieldValue(name, value);\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\ntype MyFormValues = {\r\n    x: string\r\n    y: string\r\n}\r\n\r\ntype EquationInterfaceProps = {\r\n    equation: string | null\r\n    answerEquation: (enteredAnswer: EnteredEquationAnswer) => void\r\n    timeForAnswer: number | 'NO LIMIT'\r\n}\r\n\r\nconst EquationInterface: React.FC<EquationInterfaceProps> = ({ answerEquation, ...props }) => {\r\n    const initialValues: MyFormValues = {\r\n        x: '',\r\n        y: '',\r\n    }\r\n    if (props.equation === null) return (\r\n        <div className={`${s.equationInterface} arenaInterfaceContainer`} >\r\n\r\n        </div>\r\n    )\r\n    else {\r\n        const equation = props.equation.split(',')\r\n        return (\r\n            <div className={`${s.equationInterface} arenaInterfaceContainer`}>\r\n                <div className={s.equationInterface__equation}>\r\n                    {(equation.length > 1) &&\r\n                        <img src={systemSymbol} alt=\"system of equations symbol\" className={s.equationInterface__equation_symbol}/>\r\n                    }\r\n                    <div className={s.equationInterface__equation_parts}>\r\n                        {equation.map(el =>\r\n                            <p key={el} className={s.equationInterface__equation_parts_part}>\r\n                                {el}\r\n                            </p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    onSubmit={(values) => {\r\n                        answerEquation(values);\r\n                    }}\r\n                >\r\n                    {formik => <Form className={s.equationInterface__answerForm} >\r\n                        {props.timeForAnswer !== 'NO LIMIT' &&\r\n                            <div className={s.equationInterface__answerForm_timer}>\r\n                                <p>TIME FOR DEFENSE:&nbsp;</p>\r\n                                <div className={s.equationInterface__answerForm_timer_title}>{props.timeForAnswer} </div>\r\n                            </div>\r\n                        }\r\n                        <div className={s.equationInterface__answerForm_title}>\r\n                            YOUR ANSWER IS\r\n                        </div>\r\n                        <div className={s.equationInterface__answerForm_answers}>\r\n                            <CustomField formik={formik} name=\"x\" autoFocus={true} />\r\n                            {(equation.length > 1) &&\r\n                                <CustomField formik={formik} name=\"y\" />\r\n                            }\r\n                        </div>\r\n                        <button className={s.equationInterface__answerForm_btn} type=\"submit\">\r\n                            <p>SEND (Enter)</p>\r\n                        </button>\r\n                    </Form>}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EquationInterface","// extracted by mini-css-extract-plugin\nexport default {\"questionInterface\":\"questionInterface_questionInterface__7Gvf7\",\"questionInterface__question\":\"questionInterface_questionInterface__question__5PzhL\",\"questionInterface__answers\":\"questionInterface_questionInterface__answers__LZo0d\",\"questionInterface__answers_button\":\"questionInterface_questionInterface__answers_button__eTmNL\"};","import s from './questionInterface.module.scss'\r\nimport { EnemyQuestion } from '@redux/enemyReducer';\r\nimport { requiredTalkTime } from 'settings';\r\nimport TypeWriter from 'components/typeWriter/typeWriter';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { FightInterfaceName } from '@redux/fightReducer';\r\n\r\ntype QuestionInterfaceProps = {\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    enemyQuestions: Array<EnemyQuestion> | null\r\n    enemyBeatenEnough: boolean\r\n    answerQuestion: (enteredAnswer: string) => void\r\n}\r\n\r\nconst QuestionInterface: React.FC<QuestionInterfaceProps> = ({ setDisplayingFightInterface, answerQuestion, ...props }) => {\r\n    const randomInt = useMemo(() => Math.floor(Math.random() * 2), [props.enemyQuestions])\r\n    const [questionWasDisplayed, setQuestionWasDisplayed] = useState<boolean>(false)\r\n    const [currentQuestion, setCurrentQuestion] = useState<EnemyQuestion | null>(null)\r\n\r\n    useEffect(() => {\r\n        setCurrentQuestion(props.enemyQuestions ? props.enemyQuestions[0] : null)\r\n    }, [props.enemyQuestions])\r\n\r\n    useEffect(() => setQuestionWasDisplayed(false), [props.enemyQuestions])\r\n\r\n    if (props.enemyQuestions === null || !props.enemyBeatenEnough) {\r\n        return (\r\n            <div className={`${s.questionInterface} arenaInterfaceContainer`}>\r\n                <div className={s.questionInterface__question}>\r\n                    <TypeWriter\r\n                        text={props.enemyQuestions ? (\"I don't know why, but I can't do it now.\") : (\"It doesn't make sense...\")}\r\n                        whatToDoAtTheEnd={() => setTimeout(() => {\r\n                            setDisplayingFightInterface('defaultInterface')\r\n                        }, requiredTalkTime)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    if (props.enemyQuestions.length === 0) {\r\n        return (\r\n            <div className={`${s.questionInterface} arenaInterfaceContainer`}>\r\n                <div className={s.questionInterface__question}>\r\n                    <TypeWriter\r\n                        text={\"Thank you...\"}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    if (!currentQuestion) {\r\n        return (\r\n            <div className={`${s.questionInterface} arenaInterfaceContainer`} />\r\n        )\r\n    }\r\n    return (\r\n        <div className={`${s.questionInterface} arenaInterfaceContainer`}>\r\n            <div className={s.questionInterface__question}>\r\n                <TypeWriter\r\n                    text={currentQuestion.question}\r\n                    whatToDoAtTheEnd={() => setQuestionWasDisplayed(true)}\r\n                />\r\n            </div>\r\n            {questionWasDisplayed && (randomInt === 1 ?\r\n                <div className={s.questionInterface__answers}>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.correctAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.correctAnswer}</p>\r\n                    </button>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.incorrectAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.incorrectAnswer}</p>\r\n                    </button>\r\n                </div>\r\n                :\r\n                <div className={s.questionInterface__answers}>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.incorrectAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.incorrectAnswer}</p>\r\n                    </button>\r\n                    <button className={s.questionInterface__answers_button}\r\n                        onClick={() => answerQuestion(currentQuestion.answers.correctAnswer)}\r\n                    >\r\n                        <p>{currentQuestion.answers.correctAnswer}</p>\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default QuestionInterface","// extracted by mini-css-extract-plugin\nexport default {\"emptyInventoryInterface\":\"inventoryInterface_emptyInventoryInterface__nuuB0\",\"emptyInventoryInterface__text\":\"inventoryInterface_emptyInventoryInterface__text__dO-su\",\"inventoryInterface\":\"inventoryInterface_inventoryInterface__pIdEd\",\"inventoryInterface__items\":\"inventoryInterface_inventoryInterface__items__WtN+m\",\"inventoryInterface__items_btn\":\"inventoryInterface_inventoryInterface__items_btn__lM4xT\",\"inventoryInterface__items_btn_img\":\"inventoryInterface_inventoryInterface__items_btn_img__WlsPe\",\"inventoryInterface__items_btn_count\":\"inventoryInterface_inventoryInterface__items_btn_count__AkSDO\",\"inventoryInterface__itemDescription\":\"inventoryInterface_inventoryInterface__itemDescription__Rw+MZ\",\"inventoryInterface__backBtn\":\"inventoryInterface_inventoryInterface__backBtn__N4+2W\"};","import { FightInterfaceName } from '@redux/fightReducer';\r\nimport { inventoryItemsInfo } from 'common/inventoryItemsInfo';\r\nimport { InventoryItem, InventoryItemName } from 'commonTypes';\r\nimport TypeWriter from 'components/typeWriter/typeWriter';\r\nimport { useEffect, useState } from 'react';\r\nimport s from './inventoryInterface.module.scss'\r\n\r\ntype InventoryInterfaceProps = {\r\n    inventory: Array<InventoryItem>\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    employInventoryItem: (itemName: InventoryItemName) => void\r\n}\r\n\r\nconst InventoryInterface: React.FC<InventoryInterfaceProps> = ({ setDisplayingFightInterface, employInventoryItem, ...props }) => {\r\n    const [focusItem, setFocusItem] = useState<null | InventoryItemName>(null)\r\n\r\n    if (props.inventory.length === 0) return (\r\n        <div className={`${s.emptyInventoryInterface} arenaInterfaceContainer`}>\r\n            <div className={s.emptyInventoryInterface__text}>\r\n                <TypeWriter text='My inventory is empty...' whatToDoAtTheEnd={() => setTimeout(() => setDisplayingFightInterface('defaultInterface'), 700)} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className={`${s.inventoryInterface} arenaInterfaceContainer`}>\r\n            <div className={s.inventoryInterface__items}>\r\n                {props.inventory.map(item =>\r\n                    <button key={item.name} className={s.inventoryInterface__items_btn}\r\n                        onMouseOver={() => setFocusItem(item.name)}\r\n                        onMouseLeave={() => setFocusItem(null)}\r\n                        onClick={() => {\r\n                            employInventoryItem(item.name)\r\n                            setDisplayingFightInterface('defaultInterface')\r\n                        }}\r\n                    >\r\n                        <img src={inventoryItemsInfo[item.name].img} alt={item.name}\r\n                            className={s.inventoryInterface__items_btn_img} />\r\n                        <p className={s.inventoryInterface__items_btn_count}>{item.count}</p>\r\n                    </button>\r\n                )}\r\n            </div>\r\n            {!focusItem ?\r\n                <button className={s.inventoryInterface__backBtn}\r\n                    onClick={() => setDisplayingFightInterface('defaultInterface')}\r\n                >\r\n                    <p>Close Inventory</p>\r\n                </button>\r\n                : (\r\n                    <p className={s.inventoryInterface__itemDescription}>\r\n                        {inventoryItemsInfo[focusItem].description === '' ? <br />\r\n                            : inventoryItemsInfo[focusItem].description}\r\n                    </p>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InventoryInterface","import React, { useCallback, useEffect, useState } from \"react\"\r\nimport s from './arena.module.scss'\r\nimport background from '@sprites/locations/location1/backgrounds/fightBackgroundLoc1.jpg'\r\nimport { ArenaProps } from \"./arenaContainer\"\r\nimport { changingHealthPointsTransition, delayBeforeEnemyAttack, opacityTransition, requiredEnemyHealthPointsForConversation, timeForEnemysDie } from \"settings\"\r\nimport DefaultInterface from \"./defaultInterface/defaultInterface\"\r\nimport EquationInterface from \"./equationInterface/equationInterface\"\r\nimport QuestionInterface from \"./questionInterface/questionInterface\"\r\nimport TypeWriterTransparentBtn from \"components/typeWriter/typeWriterTransparentBtn\"\r\nimport InventoryInterface from \"./inventoryInterface/inventoryInterface\"\r\nimport RenderImg from \"components/renderImg\"\r\n\r\nconst Arena: React.FC<ArenaProps> = ({ swapAttackerAndReceiving, makeAttack, answerEquation, answerQuestion, setSceneWithTransition, overcomeCurrentEnemy, setNewLocation, setDisplayingFightInterface, employInventoryItem, ...props }) => {\r\n    const playerIsAttacker = (props.attacker === 'player' && props.playerHealthPoints > 0)\r\n    const enemyBeatenEnough = true // props.enemyHealthPoints <= requiredEnemyHealthPointsForConversation\r\n    const escape = () => setSceneWithTransition(\"LocationMap\")\r\n    const [enemysOpacity, setEnemysOpacity] = useState<number>(1)\r\n\r\n    useEffect(() => {\r\n        props.setCurrentSceneDidMount(true)\r\n        return () => props.setCurrentSceneDidMount(false)\r\n    }, [])\r\n\r\n    // logic of the enemy's turn:\r\n    useEffect(() => {\r\n        if (props.attacker === \"enemy\" && props.enemyHealthPoints > 0) {\r\n            setTimeout(() => {\r\n                makeAttack()\r\n            }, delayBeforeEnemyAttack)\r\n        }\r\n    }, [props.attacker])\r\n\r\n    // logic of the timer end: \r\n    useEffect(() => {\r\n        if (props.timeForAnswer === 0) {\r\n            answerEquation('noAnswer')\r\n        }\r\n    }, [props.timeForAnswer])\r\n\r\n    // logic of the end of the battle:\r\n    useEffect(() => { //if player died\r\n        if (props.playerHealthPoints !== null && props.playerHealthPoints <= 0) {\r\n            setTimeout(() => {\r\n                setSceneWithTransition('GameOver')\r\n            }, changingHealthPointsTransition)\r\n        }\r\n    }, [props.playerHealthPoints])\r\n\r\n    useEffect(() => { //if victoryMethod === 'kill'\r\n        if (props.enemyHealthPoints !== null && props.enemyHealthPoints <= 0) {\r\n            overcomeCurrentEnemy(\"kill\")\r\n            setTimeout(() => {\r\n                setEnemysOpacity(0)\r\n            }, changingHealthPointsTransition)\r\n            setTimeout(() => {\r\n                if (props.enemyType === \"mainBoss\") {\r\n                    setSceneWithTransition('LocationMap')\r\n                }\r\n                else setSceneWithTransition('ImprovementScreen')\r\n            }, changingHealthPointsTransition + timeForEnemysDie)\r\n            setTimeout(() => {\r\n                if (props.enemyType === \"mainBoss\") {\r\n                    setNewLocation()\r\n                }\r\n                swapAttackerAndReceiving() // for return a turn to the player \r\n            }, changingHealthPointsTransition + timeForEnemysDie + opacityTransition)\r\n        }\r\n    }, [props.enemyHealthPoints])\r\n    useEffect(() => { //if victoryMethod === 'talk'\r\n        if (props.enemyQuestions !== null && props.enemyQuestions.length === 0) { // if enemyType==='mainBoss' this expression return false\r\n            overcomeCurrentEnemy(\"talk\")\r\n            setTimeout(() => {\r\n                setEnemysOpacity(0)\r\n            }, changingHealthPointsTransition) // i can use any amount of time there\r\n            setTimeout(() => {\r\n                setSceneWithTransition('ImprovementScreen')\r\n            }, changingHealthPointsTransition + timeForEnemysDie)\r\n            setTimeout(() => {\r\n                setDisplayingFightInterface(\"defaultInterface\")\r\n            }, changingHealthPointsTransition + timeForEnemysDie + opacityTransition)\r\n        }\r\n    }, [props.enemyQuestions])\r\n\r\n    return (\r\n        <div className={s.arena} >\r\n            <div className={s.arena__scene} style={{ backgroundImage: \"url(\" + background + \")\" }}>\r\n                <div className={s.arena__scene_healthBars}>\r\n                    <div className={`${s.arena__scene_healthBars_container} ${playerIsAttacker ? s.attacker : ``}`}>\r\n                        <div className={s.arena__scene_healthBars_container_health} style={{ width: `${props.playerHealthPoints}%`, transition: `all ${changingHealthPointsTransition}ms` }} />\r\n                        <p className={s.arena__scene_healthBars_container_name}>{props.playerHealthPoints}</p>\r\n                    </div>\r\n                    <div className={`${s.arena__scene_healthBars_container}`}>\r\n                        <div className={s.arena__scene_healthBars_container_health} style={{ width: `0%` }} />\r\n                        <p className={s.arena__scene_healthBars_container_name}>\r\n                            {props.enemyHealthPoints === 0 ? 'PLAYER' :\r\n                                props.playerHealthPoints === 0 ? 'ENEMY' :\r\n                                    props.attacker.toUpperCase()}'S TURN\r\n                        </p>\r\n                    </div>\r\n                    <div className={`${s.arena__scene_healthBars_container} ${!playerIsAttacker ? s.attacker : ``}`}>\r\n                        <div className={s.arena__scene_healthBars_container_health} style={{ width: `${(props.enemyType === 'mainBoss' ? props.enemyHealthPoints / 2 : props.enemyHealthPoints)}%`, transition: `all ${changingHealthPointsTransition}ms` }} />\r\n                        <p className={s.arena__scene_healthBars_container_name}>{props.enemyHealthPoints}</p>\r\n                    </div>\r\n                </div>\r\n                <div className={s.arena__scene_figthers}>\r\n                    <div className={s.arena__scene_figthers_fighter} style={{ left: `${props.playerPositionOnScreen}%` }}>\r\n                        <div className={s.arena__scene_figthers_fighter_relativeContainer}>\r\n                            {/* <RenderImg src={props.playerDefaultImg} alt=\"Player\" className={s.arena__scene_figthers_fighter_relativeContainer_img}/> */}\r\n                             <img src={props.playerDefaultImg} alt=\"Player\" className={s.arena__scene_figthers_fighter_relativeContainer_img} />\r\n                        </div>\r\n                    </div>\r\n                    <div className={s.arena__scene_figthers_fighter} style={{ right: `${props.enemyPositionOnScreen}%`, opacity: `${enemysOpacity}`, transition: `opacity ${timeForEnemysDie}ms` }}>\r\n                        <div className={s.arena__scene_figthers_fighter_relativeContainer}>\r\n                            {/* <RenderImg src={props.enemyDefaultImg} alt=\"Enemy\" className={s.arena__scene_figthers_fighter_relativeContainer_img}/> */}\r\n                            <img src={props.enemyDefaultImg} alt=\"Enemy\" className={s.arena__scene_figthers_fighter_relativeContainer_img} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={s.arena__interface}>\r\n                {\r\n                    props.displayingFightInterface === 'questionInterface' ?\r\n                        <QuestionInterface answerQuestion={answerQuestion} enemyQuestions={props.enemyQuestions} setDisplayingFightInterface={setDisplayingFightInterface} enemyBeatenEnough={enemyBeatenEnough} />\r\n                        : (\r\n                            props.displayingFightInterface === \"equationInterface\" ?\r\n                                <EquationInterface answerEquation={answerEquation} timeForAnswer={props.timeForAnswer} equation={props.equation} />\r\n                                : (\r\n                                    props.displayingFightInterface === \"inventoryInterface\" ?\r\n                                        <InventoryInterface setDisplayingFightInterface={setDisplayingFightInterface} inventory={props.inventory} employInventoryItem={employInventoryItem} />\r\n                                        : <DefaultInterface attack={makeAttack} playerIsAttacker={playerIsAttacker} escape={escape} setDisplayingFightInterface={setDisplayingFightInterface} fightInfo={props.fightInfo} />\r\n                                )\r\n                        )\r\n                }\r\n                <TypeWriterTransparentBtn /> {/*diplay: 'none' if TypeWriter doesn't write*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Arena","import { AppStateType } from \"redux/store\"\r\nimport { connect } from \"react-redux\"\r\nimport Arena from \"./arena\"\r\nimport { swapAttackerAndReceiving, makeAttack, answerEquation, answerQuestion, EnteredEquationAnswer, overcomeCurrentEnemy, setDisplayingFightInterface, FightInterfaceName } from \"@redux/fightReducer\"\r\nimport { employInventoryItem } from \"@redux/playerReducer\"\r\nimport { setSceneWithTransition, setCurrentSceneDidMount } from \"@redux/sceneReducer\"\r\nimport { SceneName } from \"scenes\"\r\nimport { setNewLocation } from \"@redux/locationReducer\"\r\nimport { InventoryItemName } from \"commonTypes\"\r\n\r\nexport type ArenaProps = StatePropsType & DispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    playerName: state.player.name,\r\n    playerDefaultImg: state.player.defaultImg,\r\n    playerHealthPoints: state.player.healthPoints,\r\n    enemyName: state.enemy.name,\r\n    enemyType: state.enemy.enemyType,\r\n    enemyDefaultImg: state.enemy.defaultImg,\r\n    enemyHealthPoints: state.enemy.healthPoints,\r\n    enemyQuestions: state.enemy.questions,\r\n    attacker: state.fight.attacker,\r\n    inventory: state.player.inventory,\r\n\r\n    fightInfo: state.fight.fightInfo,\r\n\r\n    equation: state.fight.equation,\r\n    timeForAnswer: state.fight.timeForAnswer,\r\n\r\n    playerPositionOnScreen: state.player.positionOnArenaScreen,\r\n    enemyPositionOnScreen: state.enemy.positionOnArenaScreen,\r\n\r\n    displayingFightInterface: state.fight.displayingFightInterface,\r\n})\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n    swapAttackerAndReceiving: () => void\r\n    makeAttack: () => void\r\n    answerEquation: (enteredAnswer: EnteredEquationAnswer) => void\r\n    answerQuestion: (enteredAnswer: string) => void\r\n    overcomeCurrentEnemy: (method: 'talk' | 'kill') => void\r\n    setNewLocation: () => void\r\n    setDisplayingFightInterface: (intefaceName: FightInterfaceName) => void\r\n    employInventoryItem: (itemName: InventoryItemName) => void\r\n}\r\n\r\nexport default connect(mapStateToProps, { swapAttackerAndReceiving, employInventoryItem, makeAttack, answerEquation, answerQuestion, setSceneWithTransition, overcomeCurrentEnemy, setNewLocation, setDisplayingFightInterface, setCurrentSceneDidMount })(Arena)","import { useEffect, useState } from \"react\"\r\nimport typewriterSound from '@assets/sounds/typewriterSound.mp3'\r\nimport useSound from \"use-sound\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { setTypeWriterIsWriting, setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { connect } from \"react-redux\"\r\n\r\nconst delayBeforeFirstSymbol = 300\r\nconst defaultDelayBeforeNextSymbol = 80\r\n\r\ntype TypeWriterOwnProps = {\r\n    text: string\r\n    whatToDoAtTheEnd?: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: TypeWriterOwnProps) => ({\r\n    ...ownProps,\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n    typeWriterStopped: state.game.typeWriterStopped,\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterIsWriting: (isWriting: boolean) => void\r\n    setTypeWriterStopped: (wasStop: boolean) => void\r\n}\r\n\r\ntype TypeWriterProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriter: React.FC<TypeWriterProps> = ({ text, typeWriterStopped, setTypeWriterStopped, setTypeWriterIsWriting, whatToDoAtTheEnd = () => { } }) => {\r\n    const [play, { stop }] = useSound(typewriterSound);\r\n    const [newText, setNewText] = useState<string>('')\r\n    const [letterNumber, setLetterNumber] = useState<number>(0)\r\n    const [firstSimbolDisplayed, setFirstSimbolDisplayed] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setTypeWriterStopped(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTypeWriterStopped(false)\r\n        setLetterNumber(0)\r\n        setNewText('')\r\n        setFirstSimbolDisplayed(false)\r\n        setTypeWriterIsWriting(true)\r\n    }, [text])\r\n\r\n    useEffect(() => {\r\n        if (typeWriterStopped) {\r\n            setTypeWriterIsWriting(false)\r\n            whatToDoAtTheEnd()\r\n        }\r\n    }, [typeWriterStopped])\r\n\r\n    useEffect(() => {\r\n        if (!typeWriterStopped) {\r\n            setTimeout(() => {\r\n                if (newText.length !== text.length) {\r\n                    setTimeout(() => {\r\n                        stop()\r\n                        if (!typeWriterStopped) play()\r\n                        setNewText(newText + text.charAt(letterNumber))\r\n                        setFirstSimbolDisplayed(true)\r\n                        setLetterNumber(letterNumber + 1)\r\n                    }, defaultDelayBeforeNextSymbol)\r\n                } else {\r\n                    setTypeWriterStopped(true)\r\n                }\r\n            }, firstSimbolDisplayed ? 0 : delayBeforeFirstSymbol)\r\n        }\r\n    }, [newText])\r\n\r\n    return <p>\r\n        {typeWriterStopped ? text : newText}\r\n    </p>\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterIsWriting, setTypeWriterStopped })(TypeWriter)","import { setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { AppStateType } from '@redux/store'\r\nimport { connect } from 'react-redux'\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterStopped: (isStop: boolean) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n})\r\n\r\ntype TypeWriterTransparentBtnProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriterTransparentBtn: React.FC<TypeWriterTransparentBtnProps> = ({ setTypeWriterStopped, typeWriterIsWriting }) => {\r\n    return (\r\n        <button className='transparentAbsoluteBtn'\r\n            style={{ display: `${typeWriterIsWriting ? 'initial' : 'none'}` }}\r\n            onClick={() => setTypeWriterStopped(true)} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterStopped })(TypeWriterTransparentBtn)"],"names":["inventoryItemsInfo","img","healingPotionImg","description","addedHealthPointsByHealthPotion","cost","freezingPotionImg","durationOfFreezing","poisonPotionImg","additionalDamageByPoison","durationOfPoison","attack","escape","setDisplayingFightInterface","props","className","s","onClick","disabled","playerIsAttacker","fightInfo","CustomField","formik","name","autoFocus","placeholder","toUpperCase","autoComplete","onChange","e","value","currentTarget","test","toString","setFieldValue","answerEquation","equation","split","length","src","alt","map","el","initialValues","x","y","onSubmit","values","timeForAnswer","type","answerQuestion","randomInt","useMemo","Math","floor","random","enemyQuestions","useState","questionWasDisplayed","setQuestionWasDisplayed","currentQuestion","setCurrentQuestion","useEffect","enemyBeatenEnough","text","question","whatToDoAtTheEnd","answers","correctAnswer","incorrectAnswer","setTimeout","requiredTalkTime","employInventoryItem","focusItem","setFocusItem","inventory","item","onMouseOver","onMouseLeave","count","swapAttackerAndReceiving","makeAttack","setSceneWithTransition","overcomeCurrentEnemy","setNewLocation","attacker","playerHealthPoints","enemysOpacity","setEnemysOpacity","setCurrentSceneDidMount","enemyHealthPoints","delayBeforeEnemyAttack","changingHealthPointsTransition","enemyType","timeForEnemysDie","opacityTransition","style","backgroundImage","background","width","transition","left","playerPositionOnScreen","playerDefaultImg","right","enemyPositionOnScreen","opacity","enemyDefaultImg","displayingFightInterface","connect","state","playerName","player","defaultImg","healthPoints","enemyName","enemy","questions","fight","positionOnArenaScreen","Arena","ownProps","typeWriterIsWriting","game","typeWriterStopped","setTypeWriterIsWriting","setTypeWriterStopped","useSound","typewriterSound","play","stop","newText","setNewText","letterNumber","setLetterNumber","firstSimbolDisplayed","setFirstSimbolDisplayed","charAt","display"],"sourceRoot":""}