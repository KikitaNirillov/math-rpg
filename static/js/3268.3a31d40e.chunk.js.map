{"version":3,"file":"static/js/3268.3a31d40e.chunk.js","mappings":"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","sources":["webpack://math_rpg/./src/components/main/cutscene/cutscene.module.scss?88cb","components/main/cutscene/cutscene.tsx","components/main/cutscene/cutsceneContainer.tsx","components/typeWriter/typeWriter.tsx","components/typeWriter/typeWriterTransparentBtn.tsx","../node_modules/use-sound/src/index.ts","../node_modules/use-sound/src/use-on-mount.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cutscene\":\"cutscene_cutscene__fe1hW\",\"cutscene__text\":\"cutscene_cutscene__text__Veoo-\"};","import settings from 'settings'\r\nimport TypeWriter from 'components/typeWriter/typeWriter'\r\nimport TypeWriterTransparentBtn from 'components/typeWriter/typeWriterTransparentBtn'\r\nimport s from './cutscene.module.scss'\r\nimport { CutsceneProps } from './cutsceneContainer'\r\nimport { useEffect } from 'react'\r\n\r\nconst Cutscene: React.FC<CutsceneProps> = ({ setSceneWithTransition, ...props }) => {\r\n\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, settings.delayForScenes)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    const clickBtn = () => setSceneWithTransition('LocationMap')\r\n\r\n    return (\r\n        <div className={s.cutscene}>\r\n            {\r\n                <div className={s.cutscene__text}>\r\n                    <TypeWriter text={\r\n                        `You don't feel the ground under your feet. Looks like you're falling...Boom! When you wake up, you see a small bag next to you. Having carefully examined it, you understand that there is no bottom in it. \"Why not take it with you\" you thought. A huge mountain appeared before your eyes. For no reason at all, you decide to climb to the very top of it. Forward, to meet fate!`\r\n                    } />\r\n                </div>\r\n            }\r\n            {props.typeWriterIsWriting ?\r\n                <TypeWriterTransparentBtn />\r\n                : <button className={'transparentAbsoluteBtn'}\r\n                    onClick={clickBtn}\r\n                ></button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cutscene","import { AppStateType } from \"@redux/store\";\r\nimport { connect } from \"react-redux\";\r\nimport Cutscene from \"./cutscene\";\r\nimport { setSceneWithTransition, setCurrentSceneDidMount } from \"@redux/sceneReducer\";\r\nimport { SceneName } from \"scenes\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n})\r\n\r\ntype DispatchToProps = {\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n}\r\n\r\nexport type CutsceneProps = ReturnType<typeof mapStateToProps> & DispatchToProps\r\n\r\nexport default connect(mapStateToProps, {setCurrentSceneDidMount, setSceneWithTransition })(Cutscene)","import { useEffect, useState } from \"react\"\r\nimport typewriterSound from '@assets/sounds/typewriterSound.mp3'\r\nimport useSound from \"use-sound\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { setTypeWriterIsWriting, setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { connect } from \"react-redux\"\r\n\r\nconst delayBeforeFirstSymbol = 300\r\nconst defaultDelayBeforeNextSymbol = 80\r\n\r\ntype TypeWriterOwnProps = {\r\n    text: string\r\n    whatToDoAtTheEnd?: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: TypeWriterOwnProps) => ({\r\n    ...ownProps,\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n    typeWriterStopped: state.game.typeWriterStopped,\r\n    opacity: state.scene.opacity,\r\n    soundValue: state.game.soundValue\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterIsWriting: (isWriting: boolean) => void\r\n    setTypeWriterStopped: (wasStop: boolean) => void\r\n}\r\n\r\ntype TypeWriterProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriter: React.FC<TypeWriterProps> = ({ text, typeWriterStopped, opacity, soundValue, setTypeWriterStopped, setTypeWriterIsWriting, whatToDoAtTheEnd = () => { } }) => {\r\n    const [play, { stop }] = useSound(typewriterSound, { volume: soundValue === \"OFF\" ? 0 : 0.5 });\r\n    const [newText, setNewText] = useState<string>('')\r\n    const [letterNumber, setLetterNumber] = useState<number>(0)\r\n    const [firstSimbolDisplayed, setFirstSimbolDisplayed] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setTypeWriterStopped(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTypeWriterStopped(false)\r\n        setLetterNumber(0)\r\n        setNewText('')\r\n        setFirstSimbolDisplayed(false)\r\n        setTypeWriterIsWriting(true)\r\n    }, [text])\r\n\r\n    useEffect(() => {\r\n        if (typeWriterStopped) {\r\n            setTypeWriterIsWriting(false)\r\n            whatToDoAtTheEnd()\r\n        }\r\n    }, [typeWriterStopped])\r\n\r\n    useEffect(() => {\r\n        if (!typeWriterStopped && opacity === 1) {\r\n            setTimeout(() => {\r\n                if (newText.length !== text.length) {\r\n                    setTimeout(() => {\r\n                        stop()\r\n                        if (!typeWriterStopped) play()\r\n                        setNewText(newText + text.charAt(letterNumber))\r\n                        setFirstSimbolDisplayed(true)\r\n                        setLetterNumber(letterNumber + 1)\r\n                    }, defaultDelayBeforeNextSymbol)\r\n                } else {\r\n                    setTypeWriterStopped(true)\r\n                }\r\n            }, firstSimbolDisplayed ? 0 : (delayBeforeFirstSymbol))\r\n        }\r\n    }, [newText, opacity])\r\n\r\n    return <p>\r\n        {typeWriterStopped ? text : newText}\r\n    </p>\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterIsWriting, setTypeWriterStopped })(TypeWriter)","import { setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { AppStateType } from '@redux/store'\r\nimport { connect } from 'react-redux'\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterStopped: (isStop: boolean) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n})\r\n\r\ntype TypeWriterTransparentBtnProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriterTransparentBtn: React.FC<TypeWriterTransparentBtnProps> = ({ setTypeWriterStopped, typeWriterIsWriting }) => {\r\n    return (\r\n        <button className='transparentAbsoluteBtn'\r\n            style={{ display: `${typeWriterIsWriting ? 'initial' : 'none'}` }}\r\n            onClick={() => setTypeWriterStopped(true)} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterStopped })(TypeWriterTransparentBtn)","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["_ref","setSceneWithTransition","props","_objectWithoutProperties","_excluded","useEffect","unloadedImagesQuantity","currentSceneDidMount","setTimeout","setCurrentSceneDidMount","settings","delayForScenes","_jsxs","className","s","children","_jsx","TypeWriter","text","typeWriterIsWriting","TypeWriterTransparentBtn","onClick","connect","state","game","scene","Cutscene","ownProps","_objectSpread","typeWriterStopped","opacity","soundValue","setTypeWriterIsWriting","setTypeWriterStopped","_ref$whatToDoAtTheEnd","whatToDoAtTheEnd","_useSound","useSound","typewriterSound","volume","_useSound2","_slicedToArray","play","stop","_useState","useState","_useState2","newText","setNewText","_useState3","_useState4","letterNumber","setLetterNumber","_useState5","_useState6","firstSimbolDisplayed","setFirstSimbolDisplayed","length","charAt","style","display","concat","src","callback","_ref2$volume","_ref2","playbackRate","_ref2$playbackRate","soundEnabled","_ref2$soundEnabled","interrupt","_ref2$interrupt","onload","delegated","_objectWithoutPropertiesLoose","HowlConstructor","React__default","isMounted","duration","_React$useState","setDuration","sound","_React$useState2","setSound","handleLoad","call","this","current","then","mod","_mod$Howl","Howl","_extends","Array","isArray","rate","JSON","stringify","options","forceSoundEnabled","id","pause"],"sourceRoot":""}