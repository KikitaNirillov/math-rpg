{"version":3,"file":"static/js/5056.fa64bac1.chunk.js","mappings":"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","sources":["common/inventoryItemsInfo.ts","webpack://math_rpg/./src/components/main/locationMap/inn/inn.module.scss?8fdd","components/main/locationMap/inn/inn.tsx","components/main/locationMap/inn/innContainer.tsx","webpack://math_rpg/./src/components/main/locationMap/locationMap.module.scss?7a76","webpack://math_rpg/./src/components/main/locationMap/store/store.module.scss?563c","components/main/locationMap/store/store.tsx","components/main/locationMap/store/storeContainer.tsx","components/main/locationMap/locationMap.tsx","components/main/locationMap/locationMapContainer.tsx","components/renderImg.tsx"],"sourcesContent":["import { InventoryItemName } from \"commonTypes\";\r\nimport healingPotionImg from \"assets/imgs/potions/healingPotionImg.png\"\r\nimport freezingPotionImg from \"assets/imgs/potions/freezingPotionImg.png\"\r\nimport poisonPotionImg from \"assets/imgs/potions/poisonPotionImg.png\"\r\nimport settings from \"settings\";\r\n\r\ntype ItemInfo = {\r\n    img: string\r\n    description: string\r\n    cost: number\r\n}\r\nexport const inventoryItemsInfo: Record<InventoryItemName, ItemInfo> = {\r\n    'Healing potion': {\r\n        img: healingPotionImg,\r\n        description: `Restore ${settings.addedHealthPointsByHealthPotion} health points`,\r\n        cost: 2,\r\n    },\r\n    'Freezing potion': {\r\n        img: freezingPotionImg,\r\n        description: `Freeze the enemy for ${settings.durationOfFreezing} him moves`,\r\n        cost: 4,\r\n    },\r\n    'Poison potion': {\r\n        img: poisonPotionImg,\r\n        description: `Add ${settings.additionalDamageByPoison} damage for ${settings.durationOfPoison} your moves`,\r\n        cost: 5,\r\n    },\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"inn\":\"inn_inn__mD0FL\",\"inn__healthInfo\":\"inn_inn__healthInfo__WhdCW\",\"inn__healthInfo_bar\":\"inn_inn__healthInfo_bar__2pYVZ\",\"inn__healthInfo_bar_stripe\":\"inn_inn__healthInfo_bar_stripe__zDhW9\",\"inn__healthInfo_bar_points\":\"inn_inn__healthInfo_bar_points__A1aNz\",\"inn__title\":\"inn_inn__title__o39vB\",\"inn__title_img\":\"inn_inn__title_img__mz7vU\",\"inn__buttonList\":\"inn_inn__buttonList__0WG53\",\"inn__buttonList_button\":\"inn_inn__buttonList_button__NSUr5\"};","import settings from 'settings'\r\nimport s from './inn.module.scss'\r\nimport { InnProps } from './innContainer'\r\n\r\nconst Inn: React.FC<InnProps> = ({ buyFullHeal, closeLocationMapWindow, ...props }) => {\r\n    const disableYesBtn = props.coins < settings.pricePerInn || props.playerHealthPoints === 100\r\n    return (\r\n        <div className={`${s.inn} locationMapWindow`}>\r\n            <div className={s.inn__healthInfo}>\r\n                <p className={s.inn__healthInfo_title}>Your health:</p>\r\n                <div className={s.inn__healthInfo_bar}>\r\n                    <div className={s.inn__healthInfo_bar_stripe} style={{ width: `${props.playerHealthPoints}%`, transition: `all ${settings.changingHealthPointsTransition}ms` }} />\r\n                    <p className={s.inn__healthInfo_bar_points}>{props.playerHealthPoints}</p>\r\n                </div>\r\n            </div>\r\n            <div className={s.inn__title}>\r\n                <p className={s.inn__title_text}>Do you want restore your healt by 3</p>\r\n                <img src={props.currencyImg || ''} alt=\"currency\" className={s.inn__title_img} />\r\n                <p className={s.inn__title_text}>?</p>\r\n            </div>\r\n            <div className={s.inn__buttonList}>\r\n                <button className={s.inn__buttonList_button} onClick={() => buyFullHeal()} disabled={disableYesBtn}>\r\n                    Yes\r\n                </button>\r\n                <button className={s.inn__buttonList_button} onClick={() => closeLocationMapWindow()}>\r\n                    No\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inn","import { AppStateType } from \"@redux/store\";\r\nimport { connect } from \"react-redux\";\r\nimport Inn from \"./inn\";\r\nimport { buyFullHeal } from \"@redux/playerReducer\";\r\n\r\ntype InnOwnProps = {\r\n    closeLocationMapWindow: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: InnOwnProps) => ({\r\n    playerHealthPoints: state.player.healthPoints,\r\n    currencyImg: state.location.currencyImg,\r\n    coins: state.player.coins,\r\n    closeLocationMapWindow: ownProps.closeLocationMapWindow,\r\n})\r\n\r\ntype DispatchPropsType = {\r\n    buyFullHeal: () => void\r\n}\r\n\r\nexport type InnProps = ReturnType<typeof mapStateToProps> & DispatchPropsType\r\n\r\nexport default connect(mapStateToProps, { buyFullHeal })(Inn)","// extracted by mini-css-extract-plugin\nexport default {\"locationMapScreen\":\"locationMap_locationMapScreen__PXsJn\",\"coins\":\"locationMap_coins__C7xm9\",\"coins_img\":\"locationMap_coins_img__9bWiR\",\"nowItsBackground\":\"locationMap_nowItsBackground__yq9JE\",\"locationMap\":\"locationMap_locationMap__zypAZ\",\"locationMap__backgroundImg\":\"locationMap_locationMap__backgroundImg__nk11y\",\"locationMap__onFocusInfo\":\"locationMap_locationMap__onFocusInfo__L0FHS\",\"locationMap__buttonList\":\"locationMap_locationMap__buttonList__caFXY\",\"locationMap__buttonList_innBtn\":\"locationMap_locationMap__buttonList_innBtn__WRs9W\",\"locationMap__buttonList_innBtn_icon\":\"locationMap_locationMap__buttonList_innBtn_icon__4AUKl\",\"location3\":\"locationMap_location3__fRYzp\",\"locationMap__buttonList_storeBtn\":\"locationMap_locationMap__buttonList_storeBtn__sS-O7\",\"locationMap__buttonList_storeBtn_icon\":\"locationMap_locationMap__buttonList_storeBtn_icon__nxgCs\",\"locationMap__buttonList_bossBtn\":\"locationMap_locationMap__buttonList_bossBtn__8aUlE\",\"locationMap__buttonList_bossBtn_icon\":\"locationMap_locationMap__buttonList_bossBtn_icon__sRcwp\",\"locationMap__buttonList_lairBtn\":\"locationMap_locationMap__buttonList_lairBtn__o+-vH\",\"locationMap__buttonList_lairBtn_icon\":\"locationMap_locationMap__buttonList_lairBtn_icon__JimZ7\",\"location1\":\"locationMap_location1__BuIOd\"};","// extracted by mini-css-extract-plugin\nexport default {\"store\":\"store_store__5Xnkg\",\"store__purchase\":\"store_store__purchase__NiqQI\",\"store__purchase_itemsList\":\"store_store__purchase_itemsList__eqAUx\",\"store__purchase_itemsList_btn\":\"store_store__purchase_itemsList_btn__50pwE\",\"store__purchase_itemsList_btn_img\":\"store_store__purchase_itemsList_btn_img__DkST9\",\"store__purchase_itemsList_btn_cost\":\"store_store__purchase_itemsList_btn_cost__djLIL\",\"store__purchase_itemsList_btn_cost_count\":\"store_store__purchase_itemsList_btn_cost_count__o4YXH\",\"store__purchase_itemsList_btn_cost_currency\":\"store_store__purchase_itemsList_btn_cost_currency__LMbby\",\"store__inventory\":\"store_store__inventory__8ogWE\",\"store__inventory_itemsList\":\"store_store__inventory_itemsList__QfKc2\",\"store__inventory_itemsList_item\":\"store_store__inventory_itemsList_item__w-evJ\",\"store__inventory_itemsList_item_img\":\"store_store__inventory_itemsList_item_img__jJjyC\",\"store__inventory_itemsList_item_count\":\"store_store__inventory_itemsList_item_count__pwnWq\",\"store__leaveBtn\":\"store_store__leaveBtn__72Ei4\"};","import { inventoryItemsInfo } from 'common/inventoryItemsInfo';\r\nimport { InventoryItemName } from 'commonTypes';\r\nimport { useState } from 'react';\r\nimport s from './store.module.scss'\r\nimport { StoreProps } from './storeContainer';\r\n\r\nconst Store: React.FC<StoreProps> = ({ closeLocationMapWindow, buyInventoryItem, ...props }) => {\r\n    const [focusItem, setFocusItem] = useState<null | InventoryItemName | 'noMoneyForBuy'>(null)\r\n    return (\r\n        <div className={`${s.store} locationMapWindow`}>\r\n            <p>Store:</p>\r\n            <div className={s.store__purchase}>\r\n                <div className={s.store__purchase_itemsList}>\r\n                    {\r\n                        Object.keys(inventoryItemsInfo).map(itemName =>\r\n                            <button key={itemName}\r\n                                className={s.store__purchase_itemsList_btn}\r\n                                onMouseOver={() => setFocusItem(itemName as keyof typeof inventoryItemsInfo)}\r\n                                onMouseLeave={() => setFocusItem(null)}\r\n                                onClick={() => {\r\n                                    if (props.coins < inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].cost)\r\n                                        setFocusItem('noMoneyForBuy')\r\n                                    else buyInventoryItem(itemName as keyof typeof inventoryItemsInfo, inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].cost)\r\n\r\n                                }}\r\n                            >\r\n                                <img className={s.store__purchase_itemsList_btn_img} alt={itemName}\r\n                                    src={inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].img}\r\n                                />\r\n                                <div className={s.store__purchase_itemsList_btn_cost}>\r\n                                    <p className={s.store__purchase_itemsList_btn_cost_count}>\r\n                                        {inventoryItemsInfo[itemName as keyof typeof inventoryItemsInfo].cost}\r\n                                    </p>\r\n                                    <img src={props.currencyImg} className={s.store__purchase_itemsList_btn_cost_currency} alt='currency on this location' /> {/*current currency*/}\r\n                                </div>\r\n                            </button>\r\n                        )\r\n                    }\r\n                </div>\r\n                <p className={s.store__purchase_text}>\r\n                    {focusItem ?\r\n                        (focusItem !== 'noMoneyForBuy' ?\r\n                            inventoryItemsInfo[focusItem].description === '' ? <br />\r\n                                : inventoryItemsInfo[focusItem].description\r\n                            : 'No coins...'\r\n                        )\r\n                        : '⇡ Click to buy ⇡'\r\n                    }\r\n                </p>\r\n            </div>\r\n            <div className={s.store__inventory}>\r\n                <p className={s.store__inventory_title}>\r\n                    Your inventory:\r\n                </p>\r\n                <div className={s.store__inventory_itemsList}>\r\n                    {props.inventory.length === 0 ? <p>It's empty here...</p> :\r\n                        props.inventory.map(item =>\r\n                            <div key={item.name} className={s.store__inventory_itemsList_item}>\r\n                                <img className={s.store__inventory_itemsList_item_img} alt={item.name}\r\n                                    src={inventoryItemsInfo[item.name].img} />\r\n                                <p className={s.store__inventory_itemsList_item_count}>{item.count}</p>\r\n                            </div>\r\n                        )}\r\n                </div>\r\n            </div>\r\n            <button className={s.store__leaveBtn} onClick={() => closeLocationMapWindow()}>\r\n                Leave store\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Store;","import { AppStateType } from \"@redux/store\";\r\nimport { InventoryItemName } from \"commonTypes\";\r\nimport { connect } from \"react-redux\";\r\nimport Store from \"./store\";\r\nimport { buyInventoryItem } from '@redux/playerReducer'\r\n\r\ntype StoreOwnProps = {\r\n    closeLocationMapWindow: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: StoreOwnProps) => ({\r\n    currencyImg: state.location.currencyImg,\r\n    inventory: state.player.inventory,\r\n    coins: state.player.coins,\r\n    closeLocationMapWindow: ownProps.closeLocationMapWindow,\r\n})\r\n\r\ntype DispatchPropsType = {\r\n    buyInventoryItem: (itemName: InventoryItemName, cost: number) => void\r\n}\r\n\r\nexport type StoreProps = ReturnType<typeof mapStateToProps> & DispatchPropsType\r\n\r\nexport default connect(mapStateToProps, { buyInventoryItem })(Store)","import RenderImg from 'components/renderImg'\r\nimport { useEffect, useState } from 'react'\r\nimport Inn from './inn/innContainer'\r\nimport s from './locationMap.module.scss'\r\nimport { LocationMapProps } from './locationMapContainer'\r\nimport Store from './store/storeContainer'\r\n\r\nconst LocationMap: React.FC<LocationMapProps> = (props) => {\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, 0)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    const [focusItem, setFocusItem] = useState<'inn' | 'store' | 'boss' | 'lair' | null>(null)\r\n    const [displayingWindow, setDisplayingWindow] = useState<'Inn' | 'Store' | null>(null)\r\n    const closeLocationMapWindow = () => setDisplayingWindow(null)\r\n    return (\r\n        <div className={`${s.locationMapScreen}`}>\r\n            <div className={`${s.locationMap} ${displayingWindow ? s.nowItsBackground : null}`}>\r\n                <RenderImg src={props.mapBackgroundImg} alt=\"background\" className={s.locationMap__backgroundImg} />\r\n                <div className={s.locationMap__onFocusInfo}>\r\n                    <p>\r\n                        {focusItem === null ? 'Where am I going?' : (\r\n                            (focusItem==='lair' && props.livingMonsterNames.length === 0) ? 'The lair is completely cleared' : ('Go to the ' + focusItem))}\r\n                    </p>\r\n                </div>\r\n                <div className={s.locationMap__buttonList}>\r\n                    <button className={`${s.locationMap__buttonList_innBtn} ${props.locationName && s[props.locationName]}`}\r\n                        onMouseOver={() => setFocusItem('inn')}\r\n                        onMouseLeave={() => displayingWindow === null && setFocusItem(null)}\r\n                        onClick={() => setDisplayingWindow('Inn')}>\r\n                        <RenderImg src={props.innIcon} alt=\"Inn\" className={s.locationMap__buttonList_innBtn_icon} />\r\n                    </button>\r\n                    <button className={s.locationMap__buttonList_storeBtn} \r\n                        onMouseOver={() => setFocusItem('store')}\r\n                        onMouseLeave={() => displayingWindow === null && setFocusItem(null)}\r\n                        onClick={() => setDisplayingWindow('Store')}>\r\n                        <RenderImg src={props.storeIcon} alt=\"Store\" className={s.locationMap__buttonList_storeBtn_icon} />\r\n                    </button>\r\n                    <button className={s.locationMap__buttonList_bossBtn}\r\n                        onMouseOver={() => setFocusItem('boss')}\r\n                        onMouseLeave={() => props.sceneOpacity === 1 && setFocusItem(null)}\r\n                        onClick={() => {\r\n                            if (props.mainBossName) {\r\n                                props.changeDownloadQuantity('PLUS_ONE')\r\n                                props.setNewEnemy(props.mainBossName)\r\n                                props.setSceneWithTransition('Arena')\r\n                            }\r\n                            else console.warn('no bossName found')\r\n                        }}>\r\n                        <RenderImg src={props.toBossIcon} alt='to boss' className={s.locationMap__buttonList_bossBtn_icon} />\r\n                    </button>\r\n                    <button className={`${s.locationMap__buttonList_lairBtn} ${props.locationName && s[props.locationName]}`}\r\n                        onMouseOver={() => setFocusItem('lair')}\r\n                        onMouseLeave={() => props.sceneOpacity === 1 && setFocusItem(null)}\r\n                        onClick={() => {\r\n                            if (props.livingMonsterNames.length !== 0) {\r\n                                props.changeDownloadQuantity('PLUS_ONE')\r\n                                props.setNewEnemy(props.livingMonsterNames[0])\r\n                                props.setSceneWithTransition('Arena')\r\n                            }\r\n                            else console.warn('no monsterNames found')\r\n                        }}>\r\n                        <RenderImg src={props.lairIcon} alt=\"Lair\" className={s.locationMap__buttonList_lairBtn_icon} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {displayingWindow === 'Inn' ? <Inn closeLocationMapWindow={closeLocationMapWindow} /> :\r\n                (\r\n                    displayingWindow === 'Store' ? <Store closeLocationMapWindow={closeLocationMapWindow} /> : null\r\n                )\r\n            }\r\n            {displayingWindow !== null ?\r\n                <div className={s.coins}>\r\n                    <p className={s.coins_text}>Coins: {props.coins}</p>\r\n                    <img src={props.currencyImg} className={s.coins_img} alt=\"'currency on this location'\" />\r\n                </div>\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationMap","import { connect } from \"react-redux\";\r\nimport { SceneName } from \"scenes\";\r\nimport LocationMap from \"./locationMap\";\r\nimport { setSceneWithTransition, setCurrentSceneDidMount } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\";\r\nimport { setNewEnemy } from \"@redux/enemyReducer\";\r\nimport { EnemyName } from \"@base/enemies\";\r\nimport { changeDownloadQuantity } from \"@redux/sceneReducer\";\r\n\r\nexport type LocationMapProps = DispatchPropsType & StatePropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    locationName: state.location.locationName,\r\n    mapBackgroundImg: state.location.mapBackgroundImg,\r\n    fightBackgroundImg: state.location.fightBackgroundImg,\r\n    lairIcon: state.location.locationEnvironment.lairIcon,\r\n    innIcon: state.location.locationEnvironment.innIcon,\r\n    storeIcon: state.location.locationEnvironment.storeIcon,\r\n    toBossIcon: state.location.locationEnvironment.toBossIcon,\r\n    livingMonsterNames: state.location.livingMonsterNames,\r\n    mainBossName: state.location.mainBossName,\r\n    coins: state.player.coins,\r\n    currencyImg: state.location.currencyImg,\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n\r\n    sceneOpacity: state.scene.opacity,\r\n})\r\ntype StatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n    setNewEnemy: (enemyName: EnemyName) => void\r\n    changeDownloadQuantity: (action: 'PLUS_ONE' | 'MINUS_ONE') => void\r\n}\r\n\r\nexport default connect(mapStateToProps, { setSceneWithTransition, setNewEnemy, changeDownloadQuantity, setCurrentSceneDidMount })(LocationMap)","import { connect } from \"react-redux\"\r\nimport { changeUnloadedImagesQuantity } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\ntype RenderImgOwnProps = {\r\n    src: string | undefined\r\n    alt?: string\r\n    className?: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: RenderImgOwnProps) => ({\r\n    src: ownProps.src,\r\n    alt: ownProps.alt,\r\n    className: ownProps.className\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    changeUnloadedImagesQuantity: (action: \"PLUS_ONE\" | \"MINUS_ONE\") => void\r\n}\r\n\r\ntype RenderImgProps = ReturnType<typeof mapStateToProps> & MapDispatchToProps\r\n\r\nconst RenderImg: React.FC<RenderImgProps> = ({ src, alt = 'img', className = undefined, changeUnloadedImagesQuantity }) => {\r\n\r\n    useEffect(() => {\r\n        changeUnloadedImagesQuantity(\"PLUS_ONE\")\r\n    }, [])\r\n\r\n    return (\r\n        <img src={src} alt={alt} className={className} onLoad={() => changeUnloadedImagesQuantity(\"MINUS_ONE\")} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { changeUnloadedImagesQuantity })(RenderImg)"],"names":["inventoryItemsInfo","img","healingPotionImg","description","concat","settings","addedHealthPointsByHealthPotion","cost","freezingPotionImg","durationOfFreezing","poisonPotionImg","additionalDamageByPoison","durationOfPoison","_ref","buyFullHeal","closeLocationMapWindow","props","_objectWithoutProperties","_excluded","disableYesBtn","coins","pricePerInn","playerHealthPoints","_jsxs","className","s","inn","children","inn__healthInfo","_jsx","inn__healthInfo_title","inn__healthInfo_bar","inn__healthInfo_bar_stripe","style","width","transition","changingHealthPointsTransition","inn__healthInfo_bar_points","inn__title","inn__title_text","src","currencyImg","alt","inn__title_img","inn__buttonList","inn__buttonList_button","onClick","disabled","connect","state","ownProps","player","healthPoints","location","Inn","buyInventoryItem","_useState","useState","_useState2","_slicedToArray","focusItem","setFocusItem","store","store__purchase","store__purchase_itemsList","Object","keys","map","itemName","store__purchase_itemsList_btn","onMouseOver","onMouseLeave","store__purchase_itemsList_btn_img","store__purchase_itemsList_btn_cost","store__purchase_itemsList_btn_cost_count","store__purchase_itemsList_btn_cost_currency","store__purchase_text","store__inventory","store__inventory_title","store__inventory_itemsList","inventory","length","item","store__inventory_itemsList_item","store__inventory_itemsList_item_img","name","store__inventory_itemsList_item_count","count","store__leaveBtn","Store","useEffect","unloadedImagesQuantity","currentSceneDidMount","setTimeout","setCurrentSceneDidMount","_useState3","_useState4","displayingWindow","setDisplayingWindow","locationMapScreen","locationMap","nowItsBackground","RenderImg","mapBackgroundImg","locationMap__backgroundImg","locationMap__onFocusInfo","livingMonsterNames","locationMap__buttonList","locationMap__buttonList_innBtn","locationName","innIcon","locationMap__buttonList_innBtn_icon","locationMap__buttonList_storeBtn","storeIcon","locationMap__buttonList_storeBtn_icon","locationMap__buttonList_bossBtn","sceneOpacity","mainBossName","changeDownloadQuantity","setNewEnemy","setSceneWithTransition","console","warn","toBossIcon","locationMap__buttonList_bossBtn_icon","locationMap__buttonList_lairBtn","lairIcon","locationMap__buttonList_lairBtn_icon","coins_text","coins_img","fightBackgroundImg","locationEnvironment","scene","opacity","LocationMap","changeUnloadedImagesQuantity","_ref$alt","_ref$className","undefined","onLoad"],"sourceRoot":""}