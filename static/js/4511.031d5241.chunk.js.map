{"version":3,"file":"static/js/4511.031d5241.chunk.js","mappings":"8KACA,EAA+B,mCAA/B,EAA2E,6BAA3E,EAA6H,yCAA7H,EAA4L,0CAA5L,EAAmQ,iDAAnQ,EAAwV,wDAAxV,EAA2a,+CAA3a,EAA4f,sD,2DCqD5f,EA7CkD,SAACA,IAC/CC,EAAAA,EAAAA,YAAU,WAC+B,IAAjCD,EAAME,wBAAiCF,EAAMG,sBAC7CC,YAAW,WACPJ,EAAMK,yBAAwB,EAClC,GAAGC,EAAAA,EAAAA,eAEX,GAAG,CAACN,EAAME,uBAAwBF,EAAMG,uBAExC,OAAuBI,EAAAA,EAAAA,UAA0B,MAAK,eAA/CC,EAAI,KAAEC,EAAM,KASnB,OACI,iBAAKC,UAAWC,EAAe,WAC3B,eAAID,UAAYC,EAAsB,SAAC,8BACvC,iBAAKD,UAAWC,EAAsB,WAClC,mBAAQD,UAAS,UAAKC,EAA4B,YAAc,YAATH,EAAsBG,EAAQ,IACjFC,QAAS,kBAAMH,EAAO,UAAU,EAAC,UAEjC,SAAC,IAAS,CAACI,IAAKC,EAAYC,IAAI,aAAaL,UAAWC,OAG5D,mBAAQD,UAAS,UAAKC,EAA4B,YAAc,aAATH,EAAuBG,EAAQ,IAClFC,QAAS,kBAAMH,EAAO,WAAW,EAAC,UAElC,SAAC,IAAS,CAACI,IAAKG,EAAaD,IAAI,cAAcL,UAAWC,UAIlE,eAAID,UAAWC,EAA2B,UACtC,mBAAQD,UAAWC,EACfC,QA3BK,WACbJ,GACAR,EAAMiB,iBACNjB,EAAMkB,WAAWV,GACjBR,EAAMmB,YAAY,cAEjBC,QAAQC,KAAK,qBACtB,EAoBuCC,UAAWd,EAAK,SAC1C,eAMjB,E,8BC5BA,GAAee,EAAAA,EAAAA,KAfS,SAACC,GAAmB,MAAM,CAC9CtB,uBAAwBsB,EAAMC,MAAMvB,uBACpCC,qBAAsBqB,EAAMC,MAAMtB,qBACrC,GAYuC,CAAEe,WAAAA,EAAAA,GAAYQ,uBAAAA,EAAAA,GAAwBT,eAAAA,EAAAA,GAAgBZ,wBAAAA,EAAAA,GAAyBc,YAAAA,EAAAA,IAAvH,CAAsIQ,E,kECStI,KAAeJ,EAAAA,EAAAA,KAvBS,SAACC,EAAqBI,GAA2B,MAAM,CAC3Ef,IAAKe,EAASf,IACdE,IAAKa,EAASb,IACdL,UAAWkB,EAASlB,UACvB,GAmBuC,CAAEmB,6BAAAA,EAAAA,IAA1C,EAX4C,SAAH,GAAmF,IAA7EhB,EAAG,EAAHA,IAAI,EAAD,EAAEE,IAAAA,OAAG,MAAG,MAAK,MAAEL,UAAAA,OAAS,WAAGoB,EAAS,EAAED,EAA4B,EAA5BA,6BAMpF,OAJA5B,EAAAA,EAAAA,YAAU,WACN4B,EAA6B,WACjC,GAAG,KAGC,gBAAKhB,IAAKA,EAAKE,IAAKA,EAAKL,UAAWA,EAAWqB,OAAQ,kBAAMF,EAA6B,YAAY,GAE9G,G","sources":["webpack://rpg/./src/components/main/choosePlayer/choosePlayer.module.scss?c40f","components/main/choosePlayer/choosePlayer.tsx","components/main/choosePlayer/choosePlayerContainer.tsx","components/renderImg.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"choosePlayer\":\"choosePlayer_choosePlayer__2v5TK\",\"chosen\":\"choosePlayer_chosen__oFWry\",\"choosePlayer_title\":\"choosePlayer_choosePlayer_title__jP+6f\",\"choosePlayer_heroes\":\"choosePlayer_choosePlayer_heroes__qAsjt\",\"choosePlayer_heroes_button\":\"choosePlayer_choosePlayer_heroes_button__mnEkQ\",\"choosePlayer_heroes_button_avatar\":\"choosePlayer_choosePlayer_heroes_button_avatar__LIQOr\",\"choosePlayer_buttonsList\":\"choosePlayer_choosePlayer_buttonsList__e9DT2\",\"choosePlayer_buttonsList_button\":\"choosePlayer_choosePlayer_buttonsList_button__sPiXP\"};","import s from './choosePlayer.module.scss'\r\nimport warriorImg from '@sprites/playerImgs/playerWarriorDefaultImg.jpg'\r\nimport magicianImg from '@sprites/playerImgs/playerMagicianDefaultImg.jpg'\r\nimport { useEffect, useState } from 'react'\r\nimport { ChoosePlayerProps } from './choosePlayerContainer'\r\nimport { HeroName } from 'base/heroes'\r\nimport RenderImg from 'components/renderImg'\r\nimport settings from 'settings'\r\n\r\nconst ChoosePlayer: React.FC<ChoosePlayerProps> = (props) => {\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, settings.delayForScenes)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    const [hero, choose] = useState<HeroName | null>(null)\r\n    const сhooseButton = () => {\r\n        if (hero) {\r\n            props.setNewLocation()\r\n            props.chooseHero(hero)\r\n            props.setCutscene('beginning')\r\n        }\r\n        else console.warn(\"Hero wasn't chosen\")\r\n    }\r\n    return (\r\n        <div className={s.choosePlayer}>\r\n            <h2 className={(s.choosePlayer_title)}>HOW DO YOU SEE YOURSELF?</h2>\r\n            <div className={s.choosePlayer_heroes}>\r\n                <button className={`${s.choosePlayer_heroes_button} ${(hero === 'warrior') ? s.chosen : ``}`}\r\n                    onClick={() => choose('warrior')}\r\n                >\r\n                    <RenderImg src={warriorImg} alt=\"warriorImg\" className={s.choosePlayer_heroes_button_avatar} />\r\n                    {/* <img src={warriorImg} alt=\"warriorImg\" className={s.choosePlayer_heroes_button_avatar} /> */}\r\n                </button>\r\n                <button className={`${s.choosePlayer_heroes_button} ${(hero === 'magician') ? s.chosen : ``}`}\r\n                    onClick={() => choose('magician')}\r\n                >\r\n                    <RenderImg src={magicianImg} alt=\"magicianImg\" className={s.choosePlayer_heroes_button_avatar} />\r\n                    {/* <img src={magicianImg} alt=\"magicianImg\" className={s.choosePlayer_heroes_button_avatar} /> */}\r\n                </button>\r\n            </div>\r\n            <ul className={s.choosePlayer_buttonsList}>\r\n                <button className={s.choosePlayer_buttonsList_button}\r\n                    onClick={сhooseButton} disabled={!hero}\r\n                >\r\n                    Choose\r\n                </button>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default ChoosePlayer","import { connect } from \"react-redux\"\r\nimport ChoosePlayer from \"./choosePlayer\"\r\nimport { chooseHero } from \"@redux/playerReducer\"\r\nimport { setSceneWithTransition, setCurrentSceneDidMount, setCutscene } from \"@redux/sceneReducer\"\r\nimport { setNewLocation } from \"@redux/locationReducer\"\r\nimport { SceneName } from \"scenes\"\r\nimport { HeroName } from \"base/heroes\"\r\nimport { CutsceneName } from \"@base/cutscenes\"\r\nimport { AppStateType } from \"@redux/store\"\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n})\r\n\r\ntype DispatchPropsType = {\r\n    chooseHero: (heroName: HeroName) => void\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n    setNewLocation: () => void\r\n    setCutscene: (cutsceneName: CutsceneName) => void\r\n}\r\n\r\nexport type ChoosePlayerProps = DispatchPropsType & ReturnType<typeof mapStateToProps>\r\n\r\nexport default connect(mapStateToProps, { chooseHero, setSceneWithTransition, setNewLocation, setCurrentSceneDidMount, setCutscene })(ChoosePlayer)","import { connect } from \"react-redux\"\r\nimport { changeUnloadedImagesQuantity } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\ntype RenderImgOwnProps = {\r\n    src: string | undefined\r\n    alt?: string\r\n    className?: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: RenderImgOwnProps) => ({\r\n    src: ownProps.src,\r\n    alt: ownProps.alt,\r\n    className: ownProps.className\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    changeUnloadedImagesQuantity: (action: \"PLUS_ONE\" | \"MINUS_ONE\") => void\r\n}\r\n\r\ntype RenderImgProps = ReturnType<typeof mapStateToProps> & MapDispatchToProps\r\n\r\nconst RenderImg: React.FC<RenderImgProps> = ({ src, alt = 'img', className = undefined, changeUnloadedImagesQuantity }) => {\r\n\r\n    useEffect(() => {\r\n        changeUnloadedImagesQuantity(\"PLUS_ONE\")\r\n    }, [])\r\n\r\n    return (\r\n        <img src={src} alt={alt} className={className} onLoad={() => changeUnloadedImagesQuantity(\"MINUS_ONE\")} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { changeUnloadedImagesQuantity })(RenderImg)"],"names":["props","useEffect","unloadedImagesQuantity","currentSceneDidMount","setTimeout","setCurrentSceneDidMount","settings","useState","hero","choose","className","s","onClick","src","warriorImg","alt","magicianImg","setNewLocation","chooseHero","setCutscene","console","warn","disabled","connect","state","scene","setSceneWithTransition","ChoosePlayer","ownProps","changeUnloadedImagesQuantity","undefined","onLoad"],"sourceRoot":""}