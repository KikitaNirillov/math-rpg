{"version":3,"file":"static/js/3268.e03bcff9.chunk.js","mappings":"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","sources":["webpack://rpg/./src/components/main/cutscene/cutscene.module.scss?88cb","components/main/cutscene/cutscene.tsx","components/main/cutscene/cutsceneContainer.tsx","components/typeWriter/typeWriter.tsx","components/typeWriter/typeWriterTransparentBtn.tsx","../node_modules/use-sound/src/index.ts","../node_modules/use-sound/src/use-on-mount.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cutscene\":\"cutscene_cutscene__fe1hW\",\"cutscene__text\":\"cutscene_cutscene__text__Veoo-\"};","import settings from 'settings'\r\nimport TypeWriter from 'components/typeWriter/typeWriter'\r\nimport TypeWriterTransparentBtn from 'components/typeWriter/typeWriterTransparentBtn'\r\nimport s from './cutscene.module.scss'\r\nimport { CutsceneProps } from './cutsceneContainer'\r\nimport { useEffect } from 'react'\r\n\r\nconst Cutscene: React.FC<CutsceneProps> = ({ setSceneWithTransition, ...props }) => {\r\n\r\n    useEffect(() => {\r\n        if (props.unloadedImagesQuantity === 0 && !props.currentSceneDidMount) {\r\n            setTimeout(() => {\r\n                props.setCurrentSceneDidMount(true)\r\n            }, settings.delayForScenes)\r\n        }\r\n    }, [props.unloadedImagesQuantity, props.currentSceneDidMount])\r\n\r\n    const clickBtn = () => setSceneWithTransition('LocationMap')\r\n\r\n    return (\r\n        <div className={s.cutscene}>\r\n            {\r\n                <div className={s.cutscene__text}>\r\n                    <TypeWriter text={\r\n                        `You don't feel the ground under your feet. Looks like you're falling...Boom! When you wake up, you see a small bag next to you. Having carefully examined it, you understand that there is no bottom in it. \"Why not take it with you\" you thought. A huge mountain appeared before your eyes. For no reason at all, you decide to climb to the very top of it. Forward, to meet fate!`\r\n                    } />\r\n                </div>\r\n            }\r\n            {props.typeWriterIsWriting ?\r\n                <TypeWriterTransparentBtn />\r\n                : <button className={'transparentAbsoluteBtn'}\r\n                    onClick={clickBtn}\r\n                ></button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cutscene","import { AppStateType } from \"@redux/store\";\r\nimport { connect } from \"react-redux\";\r\nimport Cutscene from \"./cutscene\";\r\nimport { setSceneWithTransition, setCurrentSceneDidMount } from \"@redux/sceneReducer\";\r\nimport { SceneName } from \"scenes\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n    unloadedImagesQuantity: state.scene.unloadedImagesQuantity,\r\n    currentSceneDidMount: state.scene.currentSceneDidMount,\r\n})\r\n\r\ntype DispatchToProps = {\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n}\r\n\r\nexport type CutsceneProps = ReturnType<typeof mapStateToProps> & DispatchToProps\r\n\r\nexport default connect(mapStateToProps, {setCurrentSceneDidMount, setSceneWithTransition })(Cutscene)","import { useEffect, useState } from \"react\"\r\nimport typewriterSound from '@assets/sounds/typewriterSound.mp3'\r\nimport useSound from \"use-sound\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { setTypeWriterIsWriting, setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { connect } from \"react-redux\"\r\n\r\nconst delayBeforeFirstSymbol = 300\r\nconst defaultDelayBeforeNextSymbol = 80\r\n\r\ntype TypeWriterOwnProps = {\r\n    text: string\r\n    whatToDoAtTheEnd?: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: TypeWriterOwnProps) => ({\r\n    ...ownProps,\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n    typeWriterStopped: state.game.typeWriterStopped,\r\n    opacity: state.scene.opacity,\r\n    soundValue: state.game.soundValue\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterIsWriting: (isWriting: boolean) => void\r\n    setTypeWriterStopped: (wasStop: boolean) => void\r\n}\r\n\r\ntype TypeWriterProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriter: React.FC<TypeWriterProps> = ({ text, typeWriterStopped, opacity, soundValue, setTypeWriterStopped, setTypeWriterIsWriting, whatToDoAtTheEnd = () => { } }) => {\r\n    const [play, { stop }] = useSound(typewriterSound, { volume: soundValue === \"OFF\" ? 0 : 0.5 });\r\n    const [newText, setNewText] = useState<string>('')\r\n    const [letterNumber, setLetterNumber] = useState<number>(0)\r\n    const [firstSimbolDisplayed, setFirstSimbolDisplayed] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setTypeWriterStopped(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTypeWriterStopped(false)\r\n        setLetterNumber(0)\r\n        setNewText('')\r\n        setFirstSimbolDisplayed(false)\r\n        setTypeWriterIsWriting(true)\r\n    }, [text])\r\n\r\n    useEffect(() => {\r\n        if (typeWriterStopped) {\r\n            setTypeWriterIsWriting(false)\r\n            whatToDoAtTheEnd()\r\n        }\r\n    }, [typeWriterStopped])\r\n\r\n    useEffect(() => {\r\n        if (!typeWriterStopped && opacity === 1) {\r\n            setTimeout(() => {\r\n                if (newText.length !== text.length) {\r\n                    setTimeout(() => {\r\n                        stop()\r\n                        if (!typeWriterStopped) play()\r\n                        setNewText(newText + text.charAt(letterNumber))\r\n                        setFirstSimbolDisplayed(true)\r\n                        setLetterNumber(letterNumber + 1)\r\n                    }, defaultDelayBeforeNextSymbol)\r\n                } else {\r\n                    setTypeWriterStopped(true)\r\n                }\r\n            }, firstSimbolDisplayed ? 0 : (delayBeforeFirstSymbol))\r\n        }\r\n    }, [newText, opacity])\r\n\r\n    return <p>\r\n        {typeWriterStopped ? text : newText}\r\n    </p>\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterIsWriting, setTypeWriterStopped })(TypeWriter)","import { setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { AppStateType } from '@redux/store'\r\nimport { connect } from 'react-redux'\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterStopped: (isStop: boolean) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n})\r\n\r\ntype TypeWriterTransparentBtnProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriterTransparentBtn: React.FC<TypeWriterTransparentBtnProps> = ({ setTypeWriterStopped, typeWriterIsWriting }) => {\r\n    return (\r\n        <button className='transparentAbsoluteBtn'\r\n            style={{ display: `${typeWriterIsWriting ? 'initial' : 'none'}` }}\r\n            onClick={() => setTypeWriterStopped(true)} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterStopped })(TypeWriterTransparentBtn)","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["setSceneWithTransition","props","useEffect","unloadedImagesQuantity","currentSceneDidMount","setTimeout","setCurrentSceneDidMount","settings","className","s","text","typeWriterIsWriting","onClick","connect","state","game","scene","Cutscene","ownProps","typeWriterStopped","opacity","soundValue","setTypeWriterIsWriting","setTypeWriterStopped","whatToDoAtTheEnd","useSound","typewriterSound","volume","play","stop","useState","newText","setNewText","letterNumber","setLetterNumber","firstSimbolDisplayed","setFirstSimbolDisplayed","length","charAt","style","display","src","callback","id","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","React","isMounted","duration","setDuration","sound","setSound","handleLoad","call","this","current","then","mod","Howl","Array","isArray","rate","JSON","stringify","options","forceSoundEnabled","pause"],"sourceRoot":""}