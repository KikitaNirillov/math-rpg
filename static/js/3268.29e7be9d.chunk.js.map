{"version":3,"file":"static/js/3268.29e7be9d.chunk.js","mappings":"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","sources":["webpack://rpg/./src/components/main/cutscene/cutscene.module.scss?88cb","components/main/cutscene/cutscene.tsx","components/main/cutscene/cutsceneContainer.tsx","components/renderImg.tsx","components/typeWriter/typeWriter.tsx","components/typeWriter/typeWriterTransparentBtn.tsx","../node_modules/use-sound/src/index.ts","../node_modules/use-sound/src/use-on-mount.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cutscene\":\"cutscene_cutscene__fe1hW\",\"cutscene__slide\":\"cutscene_cutscene__slide__9Wra7\",\"cutscene__slide_img\":\"cutscene_cutscene__slide_img__4yWSk\",\"cutscene__slide_text\":\"cutscene_cutscene__slide_text__6Ox37\"};","import { opacityTransition } from 'settings'\r\nimport TypeWriter from 'components/typeWriter/typeWriter'\r\nimport TypeWriterTransparentBtn from 'components/typeWriter/typeWriterTransparentBtn'\r\nimport s from './cutscene.module.scss'\r\nimport { CutsceneProps } from './cutsceneContainer'\r\nimport { useEffect } from 'react'\r\nimport RenderImg from 'components/renderImg'\r\n\r\nconst Cutscene: React.FC<CutsceneProps> = ({ removeCurrentSlideFromCutsceneList, setSceneWithTransition, setOpacity, ...props }) => {\r\n    useEffect(() => {\r\n        props.setCurrentSceneDidMount(true)\r\n        return () => props.setCurrentSceneDidMount(false)\r\n    }, [])\r\n    \r\n    const currentSlide = props.slideList[0]\r\n    const nextBtn = () => {\r\n        if (props.slideList.length === 1) {\r\n            setSceneWithTransition(props.nextSceneName)\r\n            setTimeout(() => {\r\n                removeCurrentSlideFromCutsceneList()\r\n            }, opacityTransition)\r\n        }\r\n        else {\r\n            setOpacity(0)\r\n            setTimeout(() => {\r\n                removeCurrentSlideFromCutsceneList()\r\n                setOpacity(1)\r\n            }, opacityTransition)\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.cutscene}>\r\n            {currentSlide &&\r\n                <div className={s.cutscene__slide}>\r\n                    <RenderImg src={currentSlide.img} alt=\"slide image\" className={s.cutscene__slide_img}/>\r\n                    {/* <img src={currentSlide.img} alt=\"slide image\" className={s.cutscene__slide_img} /> */}\r\n                    <div className={s.cutscene__slide_text}>\r\n                        <TypeWriter text={currentSlide.text} />\r\n                    </div>\r\n                </div>\r\n            }\r\n            {props.typeWriterIsWriting ?\r\n                <TypeWriterTransparentBtn />\r\n                : <button className={'transparentAbsoluteBtn'}\r\n                    onClick={nextBtn}\r\n                ></button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cutscene","import { AppStateType } from \"@redux/store\";\r\nimport { connect } from \"react-redux\";\r\nimport Cutscene from \"./cutscene\";\r\nimport { removeCurrentSlideFromCutsceneList, setSceneWithTransition, setOpacity, setCurrentSceneDidMount } from \"@redux/sceneReducer\";\r\nimport { SceneName } from \"scenes\";\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    slideList: state.scene.currentCutscene.slideList,\r\n    nextSceneName: state.scene.currentCutscene.nextSceneName,\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n})\r\n\r\ntype DispatchToProps = {\r\n    removeCurrentSlideFromCutsceneList: () => void\r\n    setSceneWithTransition: (scene: SceneName) => void\r\n    setOpacity: (opacity: number) => void\r\n    setCurrentSceneDidMount: (didMount: boolean) => void\r\n}\r\n\r\nexport type CutsceneProps = ReturnType<typeof mapStateToProps> & DispatchToProps\r\n\r\nexport default connect(mapStateToProps, {setCurrentSceneDidMount, removeCurrentSlideFromCutsceneList, setSceneWithTransition, setOpacity })(Cutscene)","import { connect } from \"react-redux\"\r\nimport { changeUnloadedImagesQuantity } from \"@redux/sceneReducer\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\ntype RenderImgOwnProps = {\r\n    src: string | undefined\r\n    alt?: string\r\n    className?: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: RenderImgOwnProps) => ({\r\n    src: ownProps.src,\r\n    alt: ownProps.alt,\r\n    className: ownProps.className\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    changeUnloadedImagesQuantity: (action: \"PLUS_ONE\" | \"MINUS_ONE\") => void\r\n}\r\n\r\ntype RenderImgProps = ReturnType<typeof mapStateToProps> & MapDispatchToProps\r\n\r\nconst RenderImg: React.FC<RenderImgProps> = ({ src, alt = 'img', className = undefined, changeUnloadedImagesQuantity }) => {\r\n\r\n    useEffect(() => {\r\n        changeUnloadedImagesQuantity(\"PLUS_ONE\")\r\n    }, [])\r\n\r\n    return (\r\n        <img src={src} alt={alt} className={className} onLoad={() => changeUnloadedImagesQuantity(\"MINUS_ONE\")} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { changeUnloadedImagesQuantity })(RenderImg)","import { useEffect, useState } from \"react\"\r\nimport typewriterSound from '@assets/sounds/typewriterSound.mp3'\r\nimport useSound from \"use-sound\"\r\nimport { AppStateType } from \"@redux/store\"\r\nimport { setTypeWriterIsWriting, setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { connect } from \"react-redux\"\r\n\r\nconst delayBeforeFirstSymbol = 300\r\nconst defaultDelayBeforeNextSymbol = 80\r\n\r\ntype TypeWriterOwnProps = {\r\n    text: string\r\n    whatToDoAtTheEnd?: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType, ownProps: TypeWriterOwnProps) => ({\r\n    ...ownProps,\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n    typeWriterStopped: state.game.typeWriterStopped,\r\n})\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterIsWriting: (isWriting: boolean) => void\r\n    setTypeWriterStopped: (wasStop: boolean) => void\r\n}\r\n\r\ntype TypeWriterProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriter: React.FC<TypeWriterProps> = ({ text, typeWriterStopped, setTypeWriterStopped, setTypeWriterIsWriting, whatToDoAtTheEnd = () => { } }) => {\r\n    const [play, { stop }] = useSound(typewriterSound);\r\n    const [newText, setNewText] = useState<string>('')\r\n    const [letterNumber, setLetterNumber] = useState<number>(0)\r\n    const [firstSimbolDisplayed, setFirstSimbolDisplayed] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setTypeWriterStopped(false)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTypeWriterStopped(false)\r\n        setLetterNumber(0)\r\n        setNewText('')\r\n        setFirstSimbolDisplayed(false)\r\n        setTypeWriterIsWriting(true)\r\n    }, [text])\r\n\r\n    useEffect(() => {\r\n        if (typeWriterStopped) {\r\n            setTypeWriterIsWriting(false)\r\n            whatToDoAtTheEnd()\r\n        }\r\n    }, [typeWriterStopped])\r\n\r\n    useEffect(() => {\r\n        if (!typeWriterStopped) {\r\n            setTimeout(() => {\r\n                if (newText.length !== text.length) {\r\n                    setTimeout(() => {\r\n                        stop()\r\n                        if (!typeWriterStopped) play()\r\n                        setNewText(newText + text.charAt(letterNumber))\r\n                        setFirstSimbolDisplayed(true)\r\n                        setLetterNumber(letterNumber + 1)\r\n                    }, defaultDelayBeforeNextSymbol)\r\n                } else {\r\n                    setTypeWriterStopped(true)\r\n                }\r\n            }, firstSimbolDisplayed ? 0 : delayBeforeFirstSymbol)\r\n        }\r\n    }, [newText])\r\n\r\n    return <p>\r\n        {typeWriterStopped ? text : newText}\r\n    </p>\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterIsWriting, setTypeWriterStopped })(TypeWriter)","import { setTypeWriterStopped } from '@redux/gameReducer'\r\nimport { AppStateType } from '@redux/store'\r\nimport { connect } from 'react-redux'\r\n\r\ntype MapDispatchToProps = {\r\n    setTypeWriterStopped: (isStop: boolean) => void\r\n}\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    typeWriterIsWriting: state.game.typeWriterIsWriting,\r\n})\r\n\r\ntype TypeWriterTransparentBtnProps = MapDispatchToProps & ReturnType<typeof mapStateToProps>\r\n\r\nconst TypeWriterTransparentBtn: React.FC<TypeWriterTransparentBtnProps> = ({ setTypeWriterStopped, typeWriterIsWriting }) => {\r\n    return (\r\n        <button className='transparentAbsoluteBtn'\r\n            style={{ display: `${typeWriterIsWriting ? 'initial' : 'none'}` }}\r\n            onClick={() => setTypeWriterStopped(true)} />\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, { setTypeWriterStopped })(TypeWriterTransparentBtn)","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    id,\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n\n    // @ts-ignore\n    setSound(this);\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        // Depending on the module system used, `mod` might hold\n        // the export directly, or it might be under `default`.\n        HowlConstructor.current = mod.Howl ?? mod.default.Howl;\n\n        isMounted.current = true;\n\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n","import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n"],"names":["removeCurrentSlideFromCutsceneList","setSceneWithTransition","setOpacity","props","useEffect","setCurrentSceneDidMount","currentSlide","slideList","className","s","src","img","alt","text","typeWriterIsWriting","onClick","length","nextSceneName","setTimeout","opacityTransition","connect","state","scene","currentCutscene","game","Cutscene","ownProps","changeUnloadedImagesQuantity","undefined","onLoad","typeWriterStopped","setTypeWriterIsWriting","setTypeWriterStopped","whatToDoAtTheEnd","useSound","typewriterSound","play","stop","useState","newText","setNewText","letterNumber","setLetterNumber","firstSimbolDisplayed","setFirstSimbolDisplayed","charAt","style","display","callback","id","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","React","isMounted","duration","setDuration","sound","setSound","handleLoad","call","this","current","then","mod","Howl","Array","isArray","rate","JSON","stringify","options","forceSoundEnabled","pause"],"sourceRoot":""}